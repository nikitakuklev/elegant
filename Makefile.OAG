CMPLR = ANSI
# turn off the -g option
OP_SYS_CFLAGS = 
#OPT_CFLAGS_NO = 
#OPT_CFLAGS_YES = -O3
#HOST_OPT = YES
#Ocustom =

#RATIONAL = purify
#RATIONAL = quantify
#RATIONAL = purecov
ifdef RATIONAL
HOST_OPT = NO
ifeq ($(EPICS_VERSION).$(EPICS_REVISION),3.13)
CC = $(RATIONAL) -best-effort $($(ANSI)_$(CMPLR))
CXX = $(RATIONAL) -best-effort $($(CPLUSPLUS)_$(CXXCMPLR))
else 
CC := $(RATIONAL) -best-effort $(CC)
CCC := $(RATIONAL) -best-effort $(CCC)
endif
endif

OP_SYS_CFLAGS+= -DSORT                 # sort for comparing the results of two elegants
                                       # -g should be turned off for comparison
OP_SYS_CFLAGS+= -DUSE_KAHAN            # use Kahan's algorithm for long sum
#OP_SYS_CFLAGS+= -DSET_DOUBLE           # set FPU as double precision
ifeq ($(MPI),1)
  USER_MPI_FLAGS = -DUSE_MPI=1         # 1 for parallel elegant, 0 for serial elegant  
  PRODOAG = Pelegant
ifdef WIN32
  CC := $(CC) $(USER_MPI_FLAGS)
  CCC := $(CCC) $(USER_MPI_FLAGS)
else
  #OP_SYS_LDLIBS += -lmpe -llmpe        # visualize the performance of the parallel elegant 
  #USER_MPI_FLAGS+=  -DUSE_MPE          # user defined MPE event
  #USER_MPI_FLAGS+=  -mpianim -L/usr/X11R6/lib -lX11   # animate MPI program in real-time
  #USER_MPI_FLAGS+= -DMPI_DEBUG         # print debugging information for MPI 
  #USER_MPI_FLAGS+= -DCHECKFLAGS=1      # if defined, check balance only at the beginning
                                        # or the particle number is changed
  MPI_PATH = $(wildcard /usr/local/software/mvapich2-gcc/bin /disk1/mpich2_smpd_nemesis/bin)
  #MPI_PATH = /disk1/mpich2_mpd_ssm/bin
  #MPI_PATH = /disk1/mpich2_mpd_sock/bin
  #MPI_PATH = /usr/local/software/mvapich2-gcc/bin
  #MPI_PATH = /share/mpich/ch_p4/bin
  #MPI_PATH = /data/mpich2_mpd_nemesis/bin
  CC = $(MPI_PATH)/mpicc  $(USER_MPI_FLAGS)   
  CCC = $(MPI_PATH)/mpicxx  $(USER_MPI_FLAGS)
endif
endif

ifeq ($(NOMPI),1)
  PRODOAG = elegant
endif


ifneq ($(MPI),1)
ifneq ($(NOMPI),1)
PRODOAG = madto sddssasefel ibsEmittance
endif
endif

ifeq ($(CONDOR_COMPILE),1)
ifeq ($(EPICS_VERSION).$(EPICS_REVISION),3.13)
  CC = condor_compile -condor_standalone $($(ANSI)_$(CMPLR)) -DCONDOR_COMPILE 
  CXX = condor_compile -condor_standalone $($(CPLUSPLUS)_$(CXXCMPLR)) -DCONDOR_COMPILE
else
  POSIX_LDLIBS_YES = 
  CC := condor_compile -condor_standalone $(CC) -DCONDOR_COMPILE
  CCC := condor_compile -condor_standalone $(CCC) -DCONDOR_COMPILE
endif
endif

ifdef VALGRIND
HOST_OPT=NO
endif


ifeq ($(EPICS_VERSION).$(EPICS_REVISION),3.13)
PROD = $(PRODOAG)
else
PROD_HOST = $(PRODOAG)
endif

USR_CFLAGS = 	-I$(EPICS_EXTENSIONS)/src/SDDS/include -I$(EPICS_EXTENSIONS_INCLUDE) \
		-DIEEE_MATH -DzLib 

USR_CFLAGS_Linux = -I/lib/modules/`uname -r`/build/include -DMINIMIZE_MEMORY

USR_CFLAGS_DEFAULT += -DUNIX -DMINIMIZE_MEMORY

ifeq ($(LYNCEANTECH),1) 
        USR_CFLAGS += -DLYNCEANTECH
endif

ifdef WIN32
USR_LIBS = 	mdbcommon matlib fftpack SDDS1 \
		rpnlib mdbmth namelist mdblib \
		meschach z fdlibm
z_DIR = $(EPICS_EXTENSIONS_LIB)

ifeq ($(MPI),1)
USR_CFLAGS_WIN32 = -Ic:/MPICH2/include
USR_LIBS += mpi
mpi_DIR = c:/MPICH2/lib
else
USR_CFLAGS_WIN32 = -nil-
endif
else
USR_LIBS = 	mdbcommon matlib fftpack SDDS1 \
		rpnlib mdbmth namelist mdblib \
		meschach
SYS_PROD_LIBS_DEFAULT += z 
SYS_PROD_LIBS_Linux += z 
SYS_PROD_LIBS_solaris += z curses rt 
endif

MAKE = make
ifeq ($(HOST_ARCH),solaris-sparc)
MAKE = gnumake
ACC_DEP_CFLAGS = -KPIC -v
CCC_DEP_CFLAGS = -KPIC -v
GCC_DEP_CFLAGS += -D__EXTENSIONS__
endif
ifeq ($(EPICS_HOST_ARCH),solaris-sparc)
MAKE = gnumake
endif
ifeq ($(EPICS_HOST_ARCH),solaris-x86)
MAKE = gmake
endif
ifeq ($(EPICS_HOST_ARCH),solaris-x86-gnu)
MAKE = gmake
endif

LAPACK = 0
#Use LAPACK on Linux by default.
#This is available as an RPM package.
ifeq ($(OS_CLASS),Linux)
LAPACK = 1
endif

CLAPACK = 0
#Use CLAPACK on WIN32 by default.
#This may make it harder for outside users to compile elegant but they
#can always turn if off if they want
ifdef WIN32
CLAPACK = 1
endif

SUNPERF = 0
ifeq ($(OS_CLASS),solaris)
ifneq ($(ANSI),GCC)
ifneq ($(GNU),YES)
SUNPERF = $(words $(notdir $(wildcard /opt/SUNWspro/prod/include/cc/sunperf.h)))
endif
endif
endif

ifneq ($(SUNPERF), 0)
USR_CFLAGS += -DSUNPERF -dalign
OP_SYS_LDLIBS += -xlic_lib=sunperf
else #ifneq ($(SUNPERF), 0)
ifneq ($(LAPACK), 0)
USR_CFLAGS += -DHAVE_LAPACK -DLAPACK
ifeq ($(OS_CLASS),Linux)
SYS_PROD_LIBS_Linux += lapack blas

GFORTRAN = $(words $(notdir $(wildcard /usr/lib/libgfortran.* /usr/lib64/libgfortran.*)))
ifeq ($(GFORTRAN), 0)
SYS_PROD_LIBS_Linux += g2c
else
gcc-version = $(shell gcc -v 2> /dev/stdout | grep "^gcc" | awk '{print $$4}')
gfortran-version = $(shell gfortran -v 2> /dev/stdout | grep "^gcc" | awk '{print $$4}')
ifeq ($(gcc-version),$(gfortran-version))
SYS_PROD_LIBS_Linux += gfortran
else
SYS_PROD_LIBS_Linux += g2c
endif
endif
#gcc-version = $(shell gcc -v 2> /dev/stdout | grep "^gcc" | awk '{print $$4}')
#SYS_PROD_LIBS_Linux += $(shell if [ "$(call gcc-version)" -lt "20050722" ]; then echo "g2c" ; else echo "" ; fi;)
#SYS_PROD_LIBS_Linux += $(shell if [ "$(call gcc-version)" -gt "20051200" ]; then echo "gfortran" ; else echo "" ; fi;)
endif #ifeq ($(OS_CLASS),Linux)
ifeq ($(OS_CLASS),solaris)
OPT_CFLAGS_YES=
USR_CFLAGS += -dalign -xtarget=ultra
OP_SYS_LDLIBS += -L/usr/local/oag/lib -llapack -lblas -lF77
endif #ifeq ($(OS_CLASS),solaris)
endif #ifneq ($(LAPACK), 0)
endif #ifneq ($(SUNPERF), 0)

ifneq ($(CLAPACK), 0)
ifdef WIN32
USR_CFLAGS += -DCLAPACK -Ic:\\CLAPACK\\include
CLAPACK_LIB = c:\\CLAPACK\\lib
USR_LIBS += clapack
endif
endif

clapack_DIR = $(CLAPACK_LIB)
SDDS1_DIR = $(EPICS_EXTENSIONS_LIB)
namelist_DIR = $(EPICS_EXTENSIONS_LIB)
fftpack_DIR = $(EPICS_EXTENSIONS_LIB)
mdbmth_DIR = $(EPICS_EXTENSIONS_LIB)
matlib_DIR = $(EPICS_EXTENSIONS_LIB)
mdblib_DIR = $(EPICS_EXTENSIONS_LIB)
mdbcommon_DIR = $(EPICS_EXTENSIONS_LIB)
rpnlib_DIR = $(EPICS_EXTENSIONS_LIB)
meschach_DIR = $(EPICS_EXTENSIONS_LIB)
fdlibm_DIR = $(EPICS_EXTENSIONS_LIB)

elegant_SRCS = 	alpha_data.c alpha_matrix.c amplif.c analyze.c aperture_search.c bend_matrix.c \
		bunched_beam.c cfgets.c check_duplic.c chrom.c closed_orbit.c compose_fn.c \
		compute_centroids.c compute_matrices.c concat_beamline.c concat_mat.c counter.c \
		copy_particles.c cormon_stats_output.c correct.c corrector_output.c csbend.c \
		do_tracking.c elegant.c error.c extend_list.c final_props.c find_elem.c floor.c \
		generate_bunch.c get_beamline.c kicker.c kick_poly.c kick_sbend.c \
		limit_amplitudes.c link_date.c link_elements.c load_parameters.c lorentz.c mad_parse.c \
		malign_mat.c matrix_output.c matrix.c matter.c motion.c multipole.c \
		orbtraj_output.c optimize.c output_magnets.c pepper_pot.c phase_reference.c \
		print_line.c quad_matrix.c ramp_momentum.c ramped_rfca.c response.c rfmode.c \
		run_rpnexpr.c sample.c sdds_beam.c sdds_support.c simple_rfca.c  subprocess.c \
		tune.c tilt_matrices.c trace.c track_data.c track_ramp.c track_rf.c trfmode.c \
		ztransverse.c twiss.c vary.c zlongit.c SReffects.c mod_rfca.c fitTraces.c \
		ibs_tracking.c zibs.c wake.c taylorSeries.c trwake.c circles.c tubend.c sasefelmx.c \
		sasefel.c alter.c sliceAnalysis.c divideElements.c transmuteElements.c \
		frfmode.c ftrfmode.c tfeedback.c engeCoef.c lsc.c frequencyMap.c \
		GWigSymplecticPass.c gwig.c noiseGroup.c insertSCeffects.c momentumAperture.c kahan.c \
		coupled_twiss.c drand_oag.c lookupa.c recycle.c hashtab.c moments.c
                   

Pelegant_SRCS = $(elegant_SRCS) findGlobalMinMax.c

madto_SRCS = 	madto.c sdds_strength_output.c convert_to_parmela.c convert_to_patpet.c convert_to_matlab.c \
		convert_to_patricia.c convert_to_transport.c convert_to_xorbit.c track_data.c \
		get_beamline.c mad_parse.c output_magnets.c cfgets.c trace.c check_duplic.c \
		extend_list.c matrix.c compose_fn.c find_elem.c print_line.c divideElements.c \
		transmuteElements.c convert_to_cosy.c engeCoef.c  insertSCeffects.c drand_oag.c \
                lookupa.c recycle.c hashtab.c

sddssasefel_SRCS = sddssasefel.c sasefelmx.c

ibsEmittance_SRCS = ibsEmittance.c zibs.c

fitTraces_CFLAGS = -I$(EPICS_EXTENSIONS)/src/SDDS/meschach

kahan_CFLAGS = -O0


