HDEPENDS_FILES =
CMPLR = ANSI
# turn off the -g option
OP_SYS_CFLAGS = 
OPT_CFLAGS_NO = -g
OPT_CFLAGS_YES = -O3
HOST_OPT = YES
Ocustom = -O3
#USR_LDFLAGS+= -g

#RATIONAL = purify
#RATIONAL = quantify
#RATIONAL = purecov
ifdef RATIONAL
HOST_OPT = NO
STATIC_BUILD=NO
CC := $(RATIONAL) -best-effort $(CC)
CCC := $(RATIONAL) -best-effort $(CCC)
endif

# OP_SYS_CFLAGS+= -DSORT               # sort for comparing the results of two elegants
                                       # -g should be turned off for comparison
OP_SYS_CFLAGS+= -DUSE_KAHAN            # use Kahan's algorithm for long sum
#OP_SYS_CFLAGS+= -DSET_DOUBLE           # set FPU as double precision

ifeq ($(GPU),1)
OP_SYS_CFLAGS+= -DHAVE_GPU -I../gpuElegant
STATIC_BUILD=NO
ifeq ($(VERIFY),1)
OP_SYS_CFLAGS+= -DGPU_VERIFY
endif
endif


ifeq ($(MPI),1)
  USER_MPI_FLAGS = -DUSE_MPI=1 # 1 for parallel elegant, 0 for serial elegant  
  #USER_MPI_FLAGS += -DMPI_DEBUG=1 
  USER_MPI_FLAGS += -DSDDS_MPI_IO=1
ifdef darwin
  USER_MPI_FLAGS += -mmacosx-version-min=10.9
endif
  PRODOAG = Pelegant
  STATIC_LDFLAGS_YES= -Bstatic -static-libgcc  # remove the -Wl to compile Pelegant
ifdef WIN32
    CC := $(CC) $(USER_MPI_FLAGS)
    CCC := $(CCC) $(USER_MPI_FLAGS)
else
    #OP_SYS_LDLIBS += -mpe=mpilog        # visualize the performance of the parallel elegant 
    #USER_MPI_FLAGS+=  -DUSE_MPE          # user defined MPE event
    #USER_MPI_FLAGS+=  -mpianim -L/usr/X11R6/lib -lX11   # animate MPI program in real-time
    #USER_MPI_FLAGS+= -DMPI_DEBUG # -DDEBUG        # print debugging information for MPI 
    #USER_MPI_FLAGS+= -DCHECKFLAGS=1      # if defined, check balance only at the beginning
                                        # or the particle number is changed
    MPI_PATH = $(firstword $(wildcard /lustre/3rdPartySoftware/mvapich2-2.3b/bin/ /usr/lib64/mvapich2/1.2-gcc/bin/ /soft/compilers/wrappers/xl/ /soft/libraries/mpi/mvapich2/gcc/bin/ /usr/lib64/mpich/bin/ /clhome/asd_tools/mvapich2-2.0/bin/ /Users/soliday/mpich-3.2.1/bin/ ))

ifeq ($(HOST_ARCH),linux-ppc-bgp-ibm)
  CC += $(USER_MPI_FLAGS)
  CCC += $(USER_MPI_FLAGS)
else	
  ifeq (cori, $(findstring cori, $(HOSTNAME)))
    CC += $(USER_MPI_FLAGS)
    CCC += $(USER_MPI_FLAGS)
  else
    ifeq (edison, $(findstring edison, $(HOSTNAME)))
      CC += $(USER_MPI_FLAGS)
      CCC += $(USER_MPI_FLAGS)
    else
      CC = $(MPI_PATH)mpicc   $(USER_MPI_FLAGS)   
      CCC = $(MPI_PATH)mpicxx  $(USER_MPI_FLAGS)
    endif
  endif
endif
ifeq ($(EPICS_HOST_ARCH),linux-phi)
  CC = $(MPI_PATH)mpicc -cc=icc -xMIC-AVX512  $(USER_MPI_FLAGS)   
  CCC = $(MPI_PATH)mpicxx -cxx=icpc -xMIC-AVX512 $(USER_MPI_FLAGS)
endif
    # memory debugging with totalview
    # USR_LDFLAGS+= -L/share/toolworks/totalview.7.3.0-6/linux-x86/lib/ -Wl,-rpath,/share/toolworks/totalview.7.3.0-6/linux-x86/lib/ 
    # SYS_PROD_LIBS_Linux += tvheap
endif
endif

ifeq ($(NOMPI),1)
  PRODOAG = elegant
endif


ifneq ($(MPI),1)
ifneq ($(NOMPI),1)
PRODOAG = elegantto sddssasefel ibsEmittance abrat
endif
endif

ifeq ($(CONDOR_COMPILE),1)
ifeq ($(EPICS_VERSION).$(EPICS_REVISION),3.13)
  CC = condor_compile -condor_standalone $($(ANSI)_$(CMPLR)) -DCONDOR_COMPILE 
  CXX = condor_compile -condor_standalone $($(CPLUSPLUS)_$(CXXCMPLR)) -DCONDOR_COMPILE
else
  POSIX_LDLIBS_YES = 
  CC := condor_compile -condor_standalone $(CC) -DCONDOR_COMPILE
  CCC := condor_compile -condor_standalone $(CCC) -DCONDOR_COMPILE
endif
endif

ifdef VALGRIND
HOST_OPT=NO
endif


ifeq ($(EPICS_VERSION).$(EPICS_REVISION),3.13)
PROD = $(PRODOAG)
else
PROD_HOST = $(PRODOAG)
endif

SVN_VERSION=$(shell svnversion ..)
ifeq ($(SVN_VERSION),)
SVN_VERSION=unknown
endif

USR_CFLAGS = 	-I$(EPICS_EXTENSIONS)/src/SDDS/include -I$(EPICS_EXTENSIONS)/src/SDDS/lzma -I$(EPICS_EXTENSIONS_INCLUDE) \
		-DIEEE_MATH -DzLib -DWL=32 -DSVN_VERSION=\"$(SVN_VERSION)\"
#USR_CFLAGS += CHECK_BEAM_STRUCTURE=1
USR_CPPFLAGS = 	$(USR_CFLAGS)

USR_CFLAGS_Linux = -I/lib/modules/`uname -r`/build/include -DMINIMIZE_MEMORY -D_GNU_SOURCE 
USR_CPPFLAGS_Linux = $(USR_CFLAGS_Linux)

USR_CFLAGS_DEFAULT += -DUNIX -DMINIMIZE_MEMORY
USR_CPPFLAGS_DEFAULT += -DUNIX -DMINIMIZE_MEMORY

ifeq ($(LYNCEANTECH),1) 
        USR_CFLAGS += -DLYNCEANTECH
endif


ifeq ($(EPICS_HOST_ARCH),win32-x86-mingw)
regexCode_CPPFLAGS+= -std=c++11
endif
ifeq ($(EPICS_HOST_ARCH),windows-x64-mingw)
regexCode_CPPFLAGS+= -std=c++11
endif

#Look for private version of GSL used here at APS
GSL = $(words $(wildcard $(EPICS_EXTENSIONS)/src/SDDS/gsl))
ifeq ($(GSL), 1)
USR_CFLAGS += -I$(EPICS_EXTENSIONS)/src/SDDS/gsl -DUSE_GSL
GSLLIB = rpnlib gsl gslcblas
SYS_GSLLIB = 
gsl_DIR = $(EPICS_EXTENSIONS_LIB)
gslcblas_DIR = $(EPICS_EXTENSIONS_LIB)
else

#Look for system version of GSL
SYSGSL = $(words $(notdir $(wildcard \
/usr/lib/libgsl.a \
/usr/lib/libgsl.so \
/usr/lib64/libgsl.a \
/usr/lib64/libgsl.so \
/usr/lib/i386-linux-gnu/libgsl.so \
/usr/lib/i386-linux-gnu/libgsl.a \
/usr/lib/x86_64-linux-gnu/libgsl.so \
/usr/lib/x86_64-linux-gnu/libgsl.a \
/lib/i386-linux-gnu/libgsl.so \
/lib/i386-linux-gnu/libgsl.a \
/lib/x86_64-linux-gnu/libgsl.so \
/lib/x86_64-linux-gnu/libgsl.a \
/lib/libgsl.a \
/lib/libgsl.so \
/lib64/libgsl.a \
/lib64/libgsl.so \
/sw/lib/libgsl.a \
/sw/lib/libgsl.dylib \
/opt/local/lib/libgsl.a \
/opt/local/lib/libgsl.dylib \
/usr/sfw/lib/libgsl.a \
/usr/sfw/lib/libgsl.so )))

ifneq ($(SYSGSL), 0)
USR_CFLAGS += -DUSE_GSL
GSLLIB = 
SYS_GSLLIB = gsl gslcblas
STATIC_BUILD=NO
else

#No GSL library found. Build without it.
GSLLIB = 
SYS_GSLLIB = 
endif
endif



#Look for private version of LEVMAR used here at APS
LEVMAR = $(words $(wildcard $(EPICS_EXTENSIONS)/src/SDDS/levmar))
ifeq ($(LEVMAR), 1)
USR_CFLAGS += -I$(EPICS_EXTENSIONS)/src/SDDS/levmar -DUSE_LEVMAR
LEVMARLIB = levmar
SYS_LEVMARLIB = 
levmar_DIR = $(EPICS_EXTENSIONS_LIB)
else

#Look for system version of LEVMAR
SYSLEVMAR = $(words $(notdir $(wildcard \
/usr/lib/liblevmar.a \
/usr/lib/liblevmar.so \
/usr/lib64/liblevmar.a \
/usr/lib64/liblevmar.so \
/usr/lib/i386-linux-gnu/liblevmar.so \
/usr/lib/i386-linux-gnu/liblevmar.a \
/usr/lib/x86_64-linux-gnu/liblevmar.so \
/usr/lib/x86_64-linux-gnu/liblevmar.a \
/lib/i386-linux-gnu/liblevmar.so \
/lib/i386-linux-gnu/liblevmar.a \
/lib/x86_64-linux-gnu/liblevmar.so \
/lib/x86_64-linux-gnu/liblevmar.a \
/lib/liblevmar.a \
/lib/liblevmar.so \
/lib64/liblevmar.a \
/lib64/liblevmar.so \
/sw/lib/liblevmar.a \
/sw/lib/liblevmar.dylib \
/opt/local/lib/liblevmar.a \
/opt/local/lib/liblevmar.dylib \
/usr/sfw/lib/liblevmar.a \
/usr/sfw/lib/liblevmar.so )))

ifneq ($(SYSLEVMAR), 0)
USR_CFLAGS += -DUSE_LEVMAR -DUSE_LEVMAR_H
LEVMARLIB = 
SYS_LEVMARLIB = levmar
STATIC_BUILD=NO
else

#No LEVMAR library found. Build without it.
LEVMARLIB = 
SYS_LEVMARLIB = 
endif
endif



ifdef WIN32
ifeq ($(MPI),1)
USR_LIBS = 	mdbcommon matlib fftpack SDDSmpi \
		namelist rpnlib mdbmth mdblib lzma \
		meschach z pgapack
else
USR_LIBS = 	mdbcommon matlib fftpack SDDS1 \
		namelist rpnlib mdbmth mdblib lzma \
		meschach z  
endif
z_DIR = $(EPICS_EXTENSIONS_LIB)

ifeq ($(MPI),1)
USR_CFLAGS_WIN32 = -Ic:/Program\ Files\ \(x86\)/Microsoft\ SDKs/MPI/Include
USR_CPPFLAGS_WIN32 = -Ic:/Program\ Files\ \(x86\)/Microsoft\ SDKs/MPI/Include
USR_LIBS += msmpi
ifeq ($(EPICS_HOST_ARCH),win32-x86)
    msmpi_DIR = c:/MicrosoftMPI/Lib/x86
endif
ifeq ($(EPICS_HOST_ARCH),windows-x64)
    msmpi_DIR = c:/MicrosoftMPI/Lib/x64
endif
else
USR_CFLAGS_WIN32 = -nil-
endif
else
ifeq ($(MPI),1)
USR_LIBS = 	mdbcommon matlib fftpack SDDSmpi \
		namelist rpnlib mdbmth mdblib lzma \
		meschach pgapack 
else
USR_LIBS = 	mdbcommon matlib fftpack SDDS1 \
		namelist rpnlib mdbmth mdblib lzma \
		meschach 
endif
SYS_PROD_LIBS_DEFAULT += z 
SYS_PROD_LIBS_Linux += z 
SYS_PROD_LIBS_solaris += z rt 	
endif

MAKE = make
ifeq ($(HOST_ARCH),solaris-sparc)
MAKE = gnumake
ACC_DEP_CFLAGS = -KPIC -v
CCC_DEP_CFLAGS = -KPIC -v
GCC_DEP_CFLAGS += -D__EXTENSIONS__
endif
ifeq ($(EPICS_HOST_ARCH),solaris-sparc)
MAKE = gnumake
endif
ifeq ($(EPICS_HOST_ARCH),solaris-x86)
MAKE = gmake
endif
ifeq ($(EPICS_HOST_ARCH),solaris-x86-gnu)
MAKE = gmake
endif

# On Intrepid, we need build our own lapack and blas libraries
ifeq (intrepid, $(findstring intrepid, $(HOSTNAME)))
OP_SYS_LDLIBS += -L/gpfs/home/ywang/Lib -llapack -lblas -lgfortran 
endif


INTEL_MKL=0
ifeq ($(EPICS_HOST_ARCH),linux-phi)
 INTEL_MKL_LIB = $(MKLROOT)/lib/intel64
 INTEL_MKL_INCLUDE = $(MKLROOT)/include/
 INTEL_MKL_FOUND = $(words $(wildcard $(INTEL_MKL_LIB)))
 ifneq ($(INTEL_MKL_FOUND), 0)
  INTEL_MKL = 1
 endif
endif
ifeq ($(EPICS_HOST_ARCH),linux-x86_64)
 INTEL_MKL_LIB = /usr/local/oag/3rdParty/IntelMKL_2018/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64
 INTEL_MKL_INCLUDE = /usr/local/oag/3rdParty/IntelMKL_2018/compilers_and_libraries_2018.3.222/linux/mkl/include/
 INTEL_MKL_FOUND = $(words $(wildcard $(INTEL_MKL_LIB)))
 ifeq ($(INTEL_MKL_FOUND), 0)
  INTEL_MKL_LIB = /usr/local/oag/3rdParty/IntelMKL_2018/compilers_and_libraries_2018.0.128/linux/mkl/lib/intel64
  INTEL_MKL_INCLUDE = /usr/local/oag/3rdParty/IntelMKL_2018/compilers_and_libraries_2018.0.128/linux/mkl/include/
  INTEL_MKL_FOUND = $(words $(wildcard $(INTEL_MKL_LIB)))
 endif
 ifeq ($(INTEL_MKL_FOUND), 0)
  INTEL_MKL_LIB = /clhome/asd_tools/IntelMKL_2018/compilers_and_libraries_2018.0.128/linux/mkl/lib/intel64
  INTEL_MKL_INCLUDE = /clhome/asd_tools/IntelMKL_2018/compilers_and_libraries_2018.0.128/linux/mkl/include/
  INTEL_MKL_FOUND = $(words $(wildcard $(INTEL_MKL_LIB)))
 endif
 ifeq ($(INTEL_MKL_FOUND), 0)
  INTEL_MKL_LIB = /usr/local/oag/3rdParty/IntelMKL_2017/compilers_and_libraries_2017.4.196/linux/mkl/lib/intel64
  INTEL_MKL_INCLUDE = /usr/local/oag/3rdParty/IntelMKL_2017/compilers_and_libraries_2017.4.196/linux/mkl/include/
  INTEL_MKL_FOUND = $(words $(wildcard $(INTEL_MKL_LIB)))
 endif
 ifeq ($(INTEL_MKL_FOUND), 0)
  INTEL_MKL_LIB = /usr/local/oag/3rdParty/IntelMKL-11.3/compilers_and_libraries_2016.1.150/linux/mkl/lib/intel64
  INTEL_MKL_INCLUDE = /usr/local/oag/3rdParty/IntelMKL-11.3/compilers_and_libraries_2016.1.150/linux/mkl/include/
  INTEL_MKL_FOUND = $(words $(wildcard $(INTEL_MKL_LIB)))
 endif
 ifeq ($(INTEL_MKL_FOUND), 0)
  INTEL_MKL_LIB = /opt/intel/composer_xe_2015.1.133/mkl/lib/intel64
  INTEL_MKL_INCLUDE = /opt/intel/composer_xe_2015.1.133/mkl/include/
  INTEL_MKL_FOUND = $(words $(wildcard $(INTEL_MKL_LIB)))
 endif
 ifeq ($(INTEL_MKL_FOUND), 0)
  INTEL_MKL_LIB = $(MKLROOT)/lib/intel64
  INTEL_MKL_INCLUDE = $(MKLROOT)/include/
  INTEL_MKL_FOUND = $(words $(wildcard $(INTEL_MKL_LIB)))
 endif
 ifneq ($(INTEL_MKL_FOUND), 0)
  INTEL_MKL = 1
 endif
endif
ifeq ($(EPICS_HOST_ARCH),linux-x86)
 INTEL_MKL_LIB = /usr/local/oag/3rdParty/IntelMKL_2018/compilers_and_libraries_2018.0.128/linux/mkl/lib/ia32
 INTEL_MKL_INCLUDE = /usr/local/oag/3rdParty/IntelMKL_2018/compilers_and_libraries_2018.0.128/linux/mkl/include/
 INTEL_MKL_FOUND = $(words $(wildcard $(INTEL_MKL_LIB)))
 ifeq ($(INTEL_MKL_FOUND), 0)
  INTEL_MKL_LIB = /usr/local/oag/3rdParty/IntelMKL-11.3/compilers_and_libraries_2016.1.150/linux/mkl/lib/ia32
  INTEL_MKL_INCLUDE = /usr/local/oag/3rdParty/IntelMKL-11.3/compilers_and_libraries_2016.1.150/linux/mkl/include/
  INTEL_MKL_FOUND = $(words $(wildcard $(INTEL_MKL_LIB)))
 endif
 ifneq ($(INTEL_MKL_FOUND), 0)
  INTEL_MKL = 1
 endif
endif


LAPACK = 0
#Use LAPACK on Linux if INTEL MKL is not found
#This is available as an RPM package.
ifeq ($(INTEL_MKL), 0)
 ifeq ($(OS_CLASS),Linux)
  LAPACK = 1
 endif
endif
#Use LAPACK on OSX by default.
#This is available from the Accelerate framework
ifeq ($(OS_CLASS),Darwin)
 LAPACK = 1
endif

ESSL = 0
ifeq (vesta, $(findstring vesta, $(HOSTNAME)))
 ifeq ($(EPICS_HOST_ARCH),linux-ppc64)
  LAPACK = 1
  OP_SYS_LDLIBS += -L/soft/libraries/alcf/current/gcc/LAPACK/lib -L/soft/libraries/alcf/current/gcc/BLAS/lib
 endif
 ifeq ($(EPICS_HOST_ARCH),linux-ppc64-xl)
  ESSL = 1
  LAPACK = 0
  OP_SYS_LDLIBS += -L/soft/compilers/ibmcmp-may2013/xlmass/bg/7.3/bglib64 -lmass -L/soft/libraries/alcf/current/xl/LAPACK/lib -llapack -L/soft/libraries/essl/current/essl/5.1/lib64 -lesslbg -L/soft/compilers/ibmcmp-may2013/xlf/bg/14.1/bglib64 -lxlf90_r -lxlfmath
 endif
endif

ifeq (mira, $(findstring mira, $(HOSTNAME)))
 ifeq ($(EPICS_HOST_ARCH),linux-ppc64)
  LAPACK = 1
  OP_SYS_LDLIBS += -L/soft/libraries/alcf/current/gcc/LAPACK/lib -L/soft/libraries/alcf/current/gcc/BLAS/lib
 endif
 ifeq ($(EPICS_HOST_ARCH),linux-ppc64-xl)
  ESSL = 1
  LAPACK = 0
  OP_SYS_LDLIBS += -L/soft/compilers/ibmcmp-may2013/xlmass/bg/7.3/bglib64 -lmass -L/soft/libraries/alcf/current/xl/LAPACK/lib -llapack -L/soft/libraries/essl/current/essl/5.1/lib64 -lesslbg -L/soft/compilers/ibmcmp-may2013/xlf/bg/14.1/bglib64 -lxlf90_r -lxlfmath
 endif
endif

ifneq ($(ESSL), 0)
 USR_CFLAGS += -DESSL -I/soft/libraries/essl/current/include 
 USR_CPPFLAGS += -DESSL -I/soft/libraries/essl/current/include 
endif


CLAPACK = 0
#Use CLAPACK on WIN32 by default.
#This may make it harder for outside users to compile elegant but they
#can always turn if off if they want
ifdef WIN32
 CLAPACK = $(words $(notdir $(wildcard c:/CLAPACK/include/clapack.h)))
endif


SUNPERF = 0
ifeq ($(OS_CLASS),solaris)
 ifneq ($(ANSI),GCC)
  ifneq ($(GNU),YES)
   ifneq ($(EPICS_HOST_ARCH),solaris-x86)
    ifneq ($(EPICS_HOST_ARCH),solaris-x86_64)
     SUNPERF = $(words $(notdir $(wildcard /opt/SUNWspro/prod/include/cc/sunperf.h)))
    endif
   endif
  endif
 endif
endif

ifneq ($(SUNPERF), 0)
 USR_CFLAGS += -DSUNPERF -dalign
 USR_CPPFLAGS += -DSUNPERF -dalign
 OP_SYS_LDLIBS += -xlic_lib=sunperf
else
 ifneq ($(LAPACK), 0)
  USR_CFLAGS += -DHAVE_LAPACK -DLAPACK
  USR_CPPFLAGS += -DHAVE_LAPACK -DLAPACK
  ifeq ($(OS_CLASS),Linux)
   ifneq (cori, $(findstring cori, $(HOSTNAME)))
    ifneq (edison, $(findstring edison, $(HOSTNAME)))
     SYS_PROD_LIBS_Linux += lapack blas
    endif
   endif
   gcc-version = $(shell $(CC) -v 2> /dev/stdout | grep "^gcc" | awk '{print $$4}' | head -1)
   gfortran-version = $(shell gfortran -v 2> /dev/stdout | grep "^gcc" | awk '{print $$4}')
   ifeq ($(gcc-version),$(gfortran-version))
    ifneq (cori,$(findstring cori, $(HOSTNAME)))
     ifneq (edison,$(findstring edison, $(HOSTNAME)))
      SYS_PROD_LIBS_Linux += gfortran
     endif
    endif
   else
    ifneq (intrepid,$(findstring intrepid, $(HOSTNAME)))
     ifneq (vesta,$(findstring vesta, $(HOSTNAME)))
      ifneq (mira,$(findstring mira, $(HOSTNAME)))
       ifneq (blogin,$(findstring blogin, $(HOSTNAME)))
        SYS_PROD_LIBS_Linux += g2c
       endif
      endif
     endif
    endif
   endif 
  endif #ifeq ($(OS_CLASS),Linux)
  ifeq ($(OS_CLASS),solaris)
   OPT_CFLAGS_YES=
   OPT_CPPFLAGS_YES=
   USR_CFLAGS += -dalign -xtarget=ultra
   USR_CPPFLAGS += -dalign -xtarget=ultra
   OP_SYS_LDLIBS += -L/usr/local/oag/lib -llapack -lblas -lF77
  endif #ifeq ($(OS_CLASS),solaris)
 endif #ifneq ($(LAPACK), 0)
endif

ifneq ($(INTEL_MKL), 0)
 ifeq (cori, $(findstring cori, $(HOSTNAME)))
  USR_CPPFLAGS += -DMKL -mkl=sequential
  OP_SYS_LDLIBS += -mkl=sequential
 else
  ifeq (edison, $(findstring edison, $(HOSTNAME)))
   USR_CPPFLAGS += -DMKL -mkl=sequential
   OP_SYS_LDLIBS += -mkl=sequential
  else
   USR_CPPFLAGS += -DMKL -I$(INTEL_MKL_INCLUDE)
   OP_SYS_LDLIBS += -Wl,--start-group $(INTEL_MKL_LIB)/libmkl_intel_lp64.a $(INTEL_MKL_LIB)/libmkl_sequential.a $(INTEL_MKL_LIB)/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl
  endif
 endif
else
 # section on CLAPACK
 ifneq ($(CLAPACK), 0)
  ifdef WIN32
   USR_CPPFLAGS += -DCLAPACK -DF2C -I$(CLAPACK_INCLUDE)
   USR_LDFLAGS += /nodefaultlib:libcmt $(CLAPACK_LIB)/$(EPICS_HOST_ARCH)/clapack.lib $(CLAPACK_LIB)/$(EPICS_HOST_ARCH)/BLAS.lib $(CLAPACK_LIB)/$(EPICS_HOST_ARCH)/libf2c.lib
  else
   ifeq ($(OS_CLASS),solaris)
    # One can choose threaded ptcblas ptf77blas or unthreaded cblas f77blas
    USR_CPPFLAGS += -DCLAPACK -DF2C -I$(CLAPACK_INCLUDE) -I$(ATLAS_INCLUDE)
    USR_LIBS += lapack cblaswr cblas atlas F77 I77 
    lapack_DIR = $(CLAPACK_LIB)
    cblaswr_DIR = $(CLAPACK_LIB)
    atlas_DIR = $(ATLAS_LIB)
    cblas_DIR = $(ATLAS_LIB)
    F77_DIR = $(F2C_LIB)
    I77_DIR = $(F2C_LIB)
   else
    # One can choose threaded ptcblas ptf77blas or unthreaded cblas f77blas
    USR_CPPFLAGS += -DCLAPACK -I$(ATLAS_INCLUDE)
    USR_LIBS += lapack ptcblas ptf77blas atlas 
    #USR_LIBS += lapack cblas f77blas atlas 
    lapack_DIR = $(ATLAS_LIB)
    ptcblas_DIR = $(ATLAS_LIB)
    ptf77blas_DIR = $(ATLAS_LIB)
    atlas_DIR = $(ATLAS_LIB)
    cblas_DIR = $(ATLAS_LIB)
    f77blas_DIR = $(ATLAS_LIB)
   endif
  endif
 else 
  # section on LAPACK
  ifneq ($(LAPACK), 0)
   ifdef WIN32
    USR_CPPFLAGS += -DLAPACK -I$(LAPACK_INCLUDE)
    USR_LIBS += lapack
   else
    # there is no lapack header file
    ifneq (cori, $(findstring cori, $(HOSTNAME)))
     ifneq (edison, $(findstring edison, $(HOSTNAME)))
      OP_SYS_LDLIBS += -llapack -lblas 
     endif
    endif
    USR_CPPFLAGS += -DLAPACK 
   endif
  else
   # SUNPERF choice is placed last since it may be set to 1
   # because of the existence of the library.
   ifneq ($(SUNPERF), 0)
    USR_CPPFLAGS += -DSUNPERF
    OP_SYS_LDLIBS += -xlic_lib=sunperf -lsunperf
    OP_SYS_LDFLAGS = $(COMPILER_LDFLAGS) -z combreloc -z lazyload
   endif
  endif
 endif
endif

SDDSmpi_DIR = $(EPICS_EXTENSIONS_LIB)
SDDS1_DIR = $(EPICS_EXTENSIONS_LIB)
namelist_DIR = $(EPICS_EXTENSIONS_LIB)
fftpack_DIR = $(EPICS_EXTENSIONS_LIB)
mdbmth_DIR = $(EPICS_EXTENSIONS_LIB)
matlib_DIR = $(EPICS_EXTENSIONS_LIB)
mdblib_DIR = $(EPICS_EXTENSIONS_LIB)
mdbcommon_DIR = $(EPICS_EXTENSIONS_LIB)
rpnlib_DIR = $(EPICS_EXTENSIONS_LIB)
meschach_DIR = $(EPICS_EXTENSIONS_LIB)
pgapack_DIR = $(EPICS_EXTENSIONS_LIB)
lzma_DIR = $(EPICS_EXTENSIONS_LIB)

elegant_SRCS = 	ignoreElements.c alpha_data.c alpha_matrix.c amplif.c analyze.c aperture_search.c bend_matrix.c \
		bunched_beam.c cfgets.c check_duplic.c chrom.c closed_orbit.c compose_fn.c \
		compute_centroids.c compute_matrices.c concat_beamline.c concat_mat.c counter.c \
		copy_particles.c cormon_stats_output.c correct.c corrector_output.c csbend.c ccbend.c \
		do_tracking.c elegant.c error.c extend_list.c final_props.c find_elem.c floor.c \
		generate_bunch.c get_beamline.c kicker.c kick_poly.c kick_sbend.c \
		limit_amplitudes.c link_date.c link_elements.c load_parameters.c lorentz.c mad_parse.c \
		malign_mat.c matrix_output.c matrix.c matter.c motion.cc multipole.c \
		orbtraj_output.c optimize.c output_magnets.c pepper_pot.c phase_reference.c \
		print_line.c quad_matrix.c ramp_momentum.c ramped_rfca.c response.c rfmode.cc \
		run_rpnexpr.c sample.c sdds_beam.c sdds_support.c simple_rfca.c  subprocess.c \
		tune.c tuneFootprint.c tilt_matrices.c trace.c track_data.c track_ramp.c track_rf.c trfmode.c \
		ztransverse.c twiss.cc vary.c zlongit.c SReffects.c mod_rfca.c \
		ibs_tracking.c zibs.c wake.c taylorSeries.c trwake.c circles.c tubend.c sasefelmx.c \
		sasefel.c alter.c sliceAnalysis.c divideElements.c transmuteElements.c \
		frfmode.c ftrfmode.c tfeedback.cc engeCoef.c lsc.c frequencyMap.c \
		GWigSymplecticPass.c gwig.c noiseGroup.c insertSCeffects.cc momentumAperture.c kahan.c \
		coupled_twiss.c drand_oag.c moments.c \
                insert_elements.c regexCode.cc touschekScatter.c chbook.c kickmap.c matrixOp.c \
                replace_elements.c modulate.c ramp.c fringe.c apple.c chaosMap.c lrwake.c iirFilter.c exactCorrector.c \
                makeInitialParticleEnsemble.c computeMatricesFromTracking.c transformBeamWithScript.c sdds_support_common.c bratSubroutines.c \
                magneticFieldFromGeneralizedGradient.c ionEffects.cc slicePoint.c pressureData.c elasticScattering.c inelasticScattering.c
                   
Pelegant_SRCS = $(elegant_SRCS) findGlobalMinMax.c  media_oag.c genetic.c swarm.c

elegantto_SRCS = ignoreElements.c elegantto.c sdds_strength_output.c convert_to_parmela.c convert_to_patpet.c convert_to_matlab.c convert_to_mad8.c \
		convert_to_patricia.c convert_to_transport.c convert_to_xorbit.c track_data.c \
		get_beamline.c mad_parse.c output_magnets.c cfgets.c trace.c check_duplic.c \
		extend_list.c matrix.c compose_fn.c find_elem.c print_line.c divideElements.c \
		transmuteElements.c convert_to_cosy.c engeCoef.c  insertSCeffects.cc drand_oag.c \
                insert_elements.c replace_elements.c bombElegant.c chbook.c sdds_support_common.c

sddssasefel_SRCS = sddssasefel.c sasefelmx.c bombElegant.c

abrat_SRCS = abrat.c

ibsEmittance_SRCS = ibsEmittance.c zibs.c bombElegant.c

ifdef WIN32
kahan_CFLAGS = /O0
else
kahan_CFLAGS = -O0
endif


ifeq ($(GPU),1)
ifdef WIN32
CUDA_LIBDIR = D:/Cuda10.0/lib/x64
elegantto_LDFLAGS = $(CUDA_LIBDIR)/cudart_static.lib $(CUDA_LIBDIR)/curand.lib
elegant_LDFLAGS = $(CUDA_LIBDIR)/cudart_static.lib $(CUDA_LIBDIR)/curand.lib
Pelegant_LDFLAGS = $(CUDA_LIBDIR)/cudart_static.lib $(CUDA_LIBDIR)/curand.lib
OBJJ =obj
else 
OBJJ = o
CUDART = $(words $(wildcard /usr/lib/x86_64-linux-gnu/libcudart.so /usr/lib64/libcudart.so ))
ifneq ($(CUDART), 0)
elegantto_SYS_LIBS += cudart curand
elegant_SYS_LIBS += cudart curand
Pelegant_SYS_LIBS += cudart curand
else 
CUDA_LIBDIR = $(firstword $(wildcard /usr/local/cuda-10.0/lib64 /usr/local/cuda-9.2/lib64 /usr/local/cuda-9.1/lib64 /usr/local/cuda-9.0/lib64 /usr/local/cuda-8.0/lib64 /usr/local/cuda-7.5/lib64 /usr/local/cuda/lib64 /usr/lib/x86_64-linux-gnu /Developer/NVIDIA/CUDA-10.0/lib /Developer/NVIDIA/CUDA-9.2/lib /Developer/NVIDIA/CUDA-9.1/lib /Developer/NVIDIA/CUDA-9.0/lib /Developer/NVIDIA/CUDA-8.0/lib /soft/cudatoolkit/6.5.14/lib64 ))
elegantto_LDFLAGS = -L$(CUDA_LIBDIR) -Wl,-rpath,$(CUDA_LIBDIR) -lcudart -lcurand
elegant_LDFLAGS = -L$(CUDA_LIBDIR) -Wl,-rpath,$(CUDA_LIBDIR) -lcudart -lcurand
Pelegant_LDFLAGS = -L$(CUDA_LIBDIR) -Wl,-rpath,$(CUDA_LIBDIR) -lcudart -lcurand
endif 
endif

elegantto_OBJS =    ../gpuElegant/gpu_base.$(OBJJ) \
                ../gpuElegant/gpu_matrix.$(OBJJ) \
                ../gpuElegant/gpu_memory_management.$(OBJJ) \
                ../gpuElegant/elegantto_gpu.$(OBJJ)

elegant_OBJS =  ../gpuElegant/gpu_base.$(OBJJ) \
                ../gpuElegant/gpu_bin_time_distribution.$(OBJJ) \
                ../gpuElegant/gpu_bin_transverse_distribution.$(OBJJ) \
                ../gpuElegant/gpu_compute_centroids.$(OBJJ) \
                ../gpuElegant/gpu_convolve_arrays.$(OBJJ) \
                ../gpuElegant/gpu_csbend.$(OBJJ) \
                ../gpuElegant/gpu_final_props.$(OBJJ) \
                ../gpuElegant/gpu_funcs.$(OBJJ) \
                ../gpuElegant/gpu_kahan.$(OBJJ) \
                ../gpuElegant/gpu_killParticles.$(OBJJ) \
                ../gpuElegant/gpu_limit_amplitudes.$(OBJJ) \
                ../gpuElegant/gpu_lrwake.$(OBJJ) \
                ../gpuElegant/gpu_lsc.$(OBJJ) \
                ../gpuElegant/gpu_matrix.$(OBJJ) \
                ../gpuElegant/gpu_matter.$(OBJJ) \
                ../gpuElegant/gpu_memory_management.$(OBJJ) \
                ../gpuElegant/gpu_multipole.$(OBJJ) \
                ../gpuElegant/gpu_reductions.$(OBJJ) \
                ../gpuElegant/gpu_simple_rfca.$(OBJJ) \
                ../gpuElegant/gpu_trwake.$(OBJJ) \
                ../gpuElegant/gpu_wake.$(OBJJ) \
                ../gpuElegant/printCudaDeviceProp.$(OBJJ) \
                ../gpuElegant/elegant_gpu.$(OBJJ)

Pelegant_OBJS =  ../gpuElegant/mpi_gpu_base.$(OBJJ) \
                ../gpuElegant/mpi_gpu_bin_time_distribution.$(OBJJ) \
                ../gpuElegant/mpi_gpu_bin_transverse_distribution.$(OBJJ) \
                ../gpuElegant/mpi_gpu_compute_centroids.$(OBJJ) \
                ../gpuElegant/mpi_gpu_convolve_arrays.$(OBJJ) \
                ../gpuElegant/mpi_gpu_csbend.$(OBJJ) \
                ../gpuElegant/mpi_gpu_final_props.$(OBJJ) \
                ../gpuElegant/mpi_gpu_funcs.$(OBJJ) \
                ../gpuElegant/mpi_gpu_kahan.$(OBJJ) \
                ../gpuElegant/mpi_gpu_killParticles.$(OBJJ) \
                ../gpuElegant/mpi_gpu_limit_amplitudes.$(OBJJ) \
                ../gpuElegant/mpi_gpu_lrwake.$(OBJJ) \
                ../gpuElegant/mpi_gpu_lsc.$(OBJJ) \
                ../gpuElegant/mpi_gpu_matrix.$(OBJJ) \
                ../gpuElegant/mpi_gpu_matter.$(OBJJ) \
                ../gpuElegant/mpi_gpu_memory_management.$(OBJJ) \
                ../gpuElegant/mpi_gpu_multipole.$(OBJJ) \
                ../gpuElegant/mpi_gpu_reductions.$(OBJJ) \
                ../gpuElegant/mpi_gpu_simple_rfca.$(OBJJ) \
                ../gpuElegant/mpi_gpu_trwake.$(OBJJ) \
                ../gpuElegant/mpi_gpu_wake.$(OBJJ) \
                ../gpuElegant/mpi_printCudaDeviceProp.$(OBJJ) \
                ../gpuElegant/Pelegant_gpu.$(OBJJ)
endif

ifeq ($(VERIFY),1)
elegantto_OBJS += ../gpuElegant/gpu_verify.$(OBJJ)
elegant_OBJS += ../gpuElegant/gpu_verify.$(OBJJ)
endif

abrat_LIBS += $(GSLLIB)
abrat_SYS_LIBS += $(SYS_GSLLIB)
elegantto_LIBS += $(GSLLIB)
elegantto_SYS_LIBS += $(SYS_GSLLIB) $(EXTRAGPULIBS)
elegant_LIBS += $(GSLLIB) $(LEVMARLIB) 
elegant_SYS_LIBS += $(SYS_GSLLIB) $(SYS_LEVMARLIB) $(EXTRAGPULIBS)
Pelegant_LIBS += $(GSLLIB) $(LEVMARLIB) 
Pelegant_SYS_LIBS += $(SYS_GSLLIB) $(SYS_LEVMARLIB) $(EXTRAMPILIBS)
