#!/bin/sh  
# \
exec oagtclsh "$0" "$@"

set auto_path [linsert $auto_path 0  $env(OAG_TOP_DIR)/oag/apps/lib/$env(HOST_ARCH)]
set auto_path [linsert $auto_path 0 $env(OAG_TOP_DIR)/oag/lib_patch/$env(HOST_ARCH)]
APSStandardSetup

set ex0Target 80e-12
source mogaConfig.tcl

set usage {usage: procTracking -valueList <list> -tagList <list> -rootname <string> -runID <integer>}
# E.g., procTracking -tagList "S1 S2" -valueList "1.7 5.6" -rootname run001 -runID 1

set valueList ""
set tagList ""
set rootname ""
set runID ""
set oldDir [pwd]
set args $argv
if {[APSStrictParseArguments {oldDir valueList tagList rootname runID xchrom ychrom}] || \
	![string length $rootname] } {
    return -code error "$usage"
}

if [file exists $rootname.procStart] exit
if [file exists $rootname.proc] exit
set fd [open $rootname.procStart w]
close $fd

set fd [open $oldDir/log-$rootname a]
puts $fd [clock format [clock seconds]]

proc failAndExit {result} {
    global rootname fd runID argv
    puts $fd "\nError processing data: argv=$argv\nrunID=$runID, rootname=$rootname\n$result"
    puts $fd "Files for this rootname: [glob -nocomplain $rootname.*]"
    if [catch {set flog [open $rootname.log r]} result] {
        puts $fd "$result"
    } else {
        while {![eof $flog]} {
            gets $flog data
            puts $fd $data
        }
        close $flog
    }
    close $fd
    # file copy -force log-$rootname errorLogs/log-$rootname
    # catch {eval file delete -force [glob -nocomplain $rootname.*]}
    exit 1
}

proc waitForFiles {args} {
    global notFoundList 
    set notFoundList ""
    set rootname ""
    set extensionList ""
    APSStrictParseArguments {rootname extensionList}
    set ok 0
    set tries 5
    while {!$ok && $tries} {
        # kludge: wait for the files to all exist
	set ok 1
        set notFoundList ""
	foreach exten $extensionList {
	    if [string compare "ok" [exec sddscheck $rootname.$exten]]!=0 {
                lappend notFoundList $rootname.$exten
                set ok 0
            }
	}
	if !$ok {
            after 5000
            incr tries -1
        }
    }
    return $ok
}

if ![waitForFiles -rootname $rootname -extensionList [list inp aper mmap twi twi2 w1]] {
    failAndExit "Unable to find needed files: $notFoundList"
}

puts $fd "[clock format [clock seconds]]: files found"

set runID [string trim $runID]
if ![string length $runID] {
    eval set runID [os editstring 2Z-x/0/ $rootname]
    if ![string length $runID] {
        set runID 0
    }
}
puts $fd "runID: $runID"

if {[catch {exec computeDeltaLimit -input $rootname.w1 -deltaLimit $deltaLimit} result] || [string match Error* $result]} {
    failAndExit "computeDeltaLimit: $result"
}
set deltaLimit [expr $result*100.0]

if [catch {exec computeLifetime -rootname $rootname -current $current -bunches $bunches -coupling $coupling -sigmaz $sigmaz -deltaLimit $deltaLimit} result] {
    failAndExit "computeLifetime: $result"
}
puts $fd "Lifetime done"

if [catch {exec sddsprocess $rootname.mmap -pipe=out \
        "-define=column,deltaAbs,delta abs" \
        -process=deltaAbs,min,%sMin \
        | sddscollapse -pipe=in $rootname.mmapc 
    exec sddscollapse $rootname.twi $rootname.twic
    exec sddscollapse $rootname.ltime $rootname.ltimec 
    exec sddsprocess $rootname.aper -pipe=out \
	     "-define=column,xClipped1,xClipped $clipPositive > ? $clipPositive : xClipped $ ,units=m" \
	     -process=yClipped,integral,Area1,functionOf=xClipped1 \
             | sddscollapse -pipe \
             | sddsxref $rootname.twic -pipe -take=* \
	     | sddsxref $rootname.ltimec -pipe -take=* \
             | sddsxref $rootname.inp -pipe -take=* \
             | sddsxref $rootname.mmapc -pipe -take=* -nowarning \
             | sddsprocess -pipe=in $rootname.proc1 \
             "-redefine=column,deltaLimitLT,$deltaLimit" \
             "-reprint=column,runName,$rootname" \
             "-redefine=column,runID,$runID,type=long" \
             "-redefine=column,ex0Penalty,ex0 $ex0Target 1e-12 segt" \
             "-redefine=column,ChromPenalty,dnux/dp $xchrom .01 selt  dnuy/dp $ychrom .01 selt +" \
             "-redefine=column,DAPenalty,Area1 chs" \
             "-redefine=column,LTPenalty,tLifetime chs" } result] {
    failAndExit "$result"
}

puts $fd "Processing done"

file rename -force $rootname.proc1 $rootname.proc

close $fd

exit 0

