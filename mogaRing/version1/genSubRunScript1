#!/bin/sh  
# \
exec oagtclsh "$0" "$@"

set auto_path [linsert $auto_path 0  $env(OAG_TOP_DIR)/oag/apps/lib/$env(HOST_ARCH)]
set auto_path [linsert $auto_path 0 $env(OAG_TOP_DIR)/oag/lib_patch/$env(HOST_ARCH)]
catch {APSStandardSetup}

if ![file exists mogaConfig.tcl] {
    puts stderr "mogaConfig.tcl not found"
    exit 1
}
set ex0Target 80e-12
source mogaConfig.tcl

set valueList ""
set tagList ""
set rootname ""
set turns 400
set runID -1

set args $argv
if {[APSStrictParseArguments {valueList tagList rootname runID }] || ![string length $valueList] || \
	![string length $tagList] || ![string length $rootname] || $runID<0 } {
    return -code error "bad arguments"
}
if [string compare $env(HOSTNAME) head.cluster]!=0 {
    puts stderr "this version only runs on weed"
    exit 1
}

set valueList [split $valueList " ,"]
set tagList   [split $tagList   " ,"]
if [llength $valueList]!=[llength $tagList] {
    return -code error "value and tag lists must be the same length"
}

lappend macroList rootname=$rootname turns=$turns xchrom=$xchrom ychrom=$ychrom energy=$energy deltaLimit=$deltaLimit 
lappend macroList rfHarmonic=$rfHarmonic xmax=$xmax ymax=$ymax s_end=$s_end name_pattern=$name_pattern sectors=$sectors
lappend macroList fseError=$fseError tiltError=$tiltError dxError=$dxError dyError=$dyError ex0Target=$ex0Target
foreach value $valueList tag $tagList {
    set $tag $value
    lappend macroList $tag=[format %.6g $value]
}
set macroOpt -macro=[join $macroList ,]

set Pelegant [exec which Pelegant]
set mpirun /lustre/3rdPartySoftware/mvapich2-1.9rc1/bin/mpirun_rsh

set fd [open $rootname.csh w]
puts $fd "\#!/bin/csh"
puts $fd "\# tagList : $tagList"
puts $fd "\# valueList : $valueList"
puts $fd "\# $macroOpt"
puts $fd "set nonomatch"
puts $fd "cat \$TMPDIR/machines"

foreach inputFile $inputList mode $modeList {
    puts $fd "echo Starting $inputFile in mode $mode"

    switch $mode {
	s {
	    # Serial
	    puts $fd "echo elegant $inputFile $macroOpt"
	    puts $fd "elegant $inputFile  $macroOpt"
	}
	p {
	    # Parallel
	    puts $fd "echo $mpirun -rsh -hostfile \$TMPDIR/machines -np $cores MV2_ENABLE_AFFINITY=0 MV2_ON_DEMAND_THRESHOLD=5000 $Pelegant $inputFile  $macroOpt"
	    puts $fd "$mpirun -rsh -hostfile \$TMPDIR/machines -np $cores MV2_ENABLE_AFFINITY=0 MV2_ON_DEMAND_THRESHOLD=5000 $Pelegant $inputFile  $macroOpt"
	}
	default {
	    puts stderr "Unknown mode for input $inputFile"
	    exit 1
	}
    }
    puts $fd "echo Finished $inputFile in mode $mode"
}

puts $fd "$processScript -rootname $rootname -runID $runID -xchrom $xchrom -ychrom $ychrom"
puts $fd "echo done > $rootname.done"

close $fd
exec chmod +x $rootname.csh 

if [string compare $queue any.q]==0 {
    set queue hive.q
    set cores1 [exec qstat -g c | fgrep all.q | token -n=5]
    if {$cores1>50} {
        set queue all.q
    }
    set cores1 [exec qstat -g c | fgrep hive.q | token -n=5]
    if {$cores1>12} {
        set queue hive.q
    }
} 
set qsubOption "-V -cwd -j y -pe mvapich2_gnu $cores -hard -q $queue -N $rootname"
catch {eval exec qsub $qsubOption $rootname.csh} result
puts stdout "queue=$queue: $result"

exit 0
