#!/bin/sh
# \
exec oagwish "$0" "$@"

#
# $Log: not supported by cvs2svn $
# Revision 1.58  2006/06/02 13:26:01  borland
# Dynamic aperture with errors now uses line search modes.
#
# Revision 1.57  2006/03/25 21:52:30  borland
# Revised momentum apeture to scan from outside toward 0 initially, which gives
# better speed and accuracy.
#
# Revision 1.56  2006/03/23 00:05:46  borland
# Added coupled twiss parameter computation using code by V. Sajaev.
# Added momentum aperture computation to elegantRingAnalysis.
#
# Revision 1.55  2005/11/04 16:27:06  borland
# Added Xiao's code for space charge element SCMULT.
#
# Revision 1.53  2005/08/24 13:44:43  borland
# Now show the time for all status messages.
#
# Revision 1.52  2005/07/25 21:00:56  borland
# Corrected to "space charge tune spread" to "space charge tune shift".
#
# Revision 1.51  2005/07/14 17:58:00  borland
# Renamed saveVarList to elegantSaveVarList.
#
# Revision 1.50  2005/07/06 13:01:47  borland
# New version by Shang.  Many procedures are moved to elegant.tcl in
# ../tcltklib.
#
#

set auto_path [linsert $auto_path 0  /usr/local/oag/apps/lib/$env(HOST_ARCH)]
set auto_path [linsert $auto_path 0  /usr/local/oag/lib_patch/$env(HOST_ARCH)]
APSDebugPath

set CVSRevisionAuthor "\$Author: borland $"

APSApplication . -name elegantRingAnalysis \
  -overview "Performs various elegant simulations for a ring."
.menu.file.menu insert 1 command -label "Save as..." -command SaveConfiguration
.menu.file.menu insert 1 command -label "Read..." -command ReadConfiguration

set status "Working..."
APSScrolledStatus .status -parent .userFrame -textVariable status -height 10 -width 135 

set sourceDir $OAGGlobal(OAGAppConfigDataDirectory)/elegant/ringAnalysisTemplates

proc setStatus {text} {
    APSSetVarAndUpdate status "[clock format [clock seconds] -format %T]: $text"
    update
}
APSSetElegantGlobals

set momentum 7.0e3
set matrixLatticeFile ""
set matrixBeamline RING
set matrixOffsetElement MALIN
set kickLatticeFile ""
set kickBeamline RING
set kickOffsetElement MALIN
set mainParameterFile(1) ""
set mainParameterFile(2) ""
set mainParameterFile(3) ""
set mainParameterFile(4) ""
set forceOccurence 0
set mainDirectory [pwd]
set mainPrefix ""
set gridEngine 0
set makePngFiles 0

proc SaveConfiguration {} {
    global elegantSaveVarList
    eval global $elegantSaveVarList
    set configFile [APSFileSelectDialog .saveDialog -listDir $mainDirectory \
                     -checkValidity 0]
    if ![string length $configFile] return
    if [file exists $configFile] {
        if {[APSMultipleChoice [APSUniqueName .] \
               -question "$configFile exists already.  What do you want to do?" \
               -returnList {0 1} \
               -labelList {Overwrite Cancel}]} {
            return
        }
    }
    APSElegantSaveJobConfiguration -filename $configFile \
	-statusCallback setStatus -momentum $momentum \
	-matrixLatticeFile  $matrixLatticeFile -matrixBeamline $matrixBeamline \
	-matrixOffsetElement $matrixOffsetElement -kickLatticeFile $kickLatticeFile \
	-kickBeamline $kickBeamline -kickOffsetElement $kickOffsetElement \
	-forceOccurence $forceOccurence -mainDirectory $mainDirectory \
	-mainPrefix $mainPrefix -gridEngine $gridEngine -makePngFiles $makePngFiles
}


proc ReadConfiguration {} {
    global mainDirectory elegantSaveVarList
    eval global $elegantSaveVarList
    set configFile [APSFileSelectDialog .saveDialog -listDir $mainDirectory \
                     -checkValidity 1]
    if ![string length $configFile] return
    if ![file exists $configFile] return
    source $configFile
    setStatus "Configuration $configFile read."
}

proc Run {args} {
    set computation ""
    APSStrictParseArguments {computation}
    global sourceDir elegantSaveVarList makePngFiles
    eval global $elegantSaveVarList
    APSElegant$computation -sourceDir $sourceDir -statusCallback setStatus \
	-momentum $momentum -matrixLatticeFile $matrixLatticeFile \
	-matrixBeamline $matrixBeamline -matrixOffsetElement $matrixOffsetElement \
	-kickLatticeFile $kickLatticeFile -kickBeamline  $kickBeamline \
	-kickOffsetElement $kickOffsetElement -forceOccurence $forceOccurence \
	-mainDirectory $mainDirectory -mainPrefix $mainPrefix \
	-gridEngine $gridEngine  -makePngFiles $makePngFiles
}

proc Display {args} {
    set type ""
    APSStrictParseArguments {type}
    if ![string length $type] {
	return
    }
    global mainDirectory mainPrefix elegantGlobalArrays makePngFiles
    eval global $elegantGlobalArrays
    set rootname ""
    set suffix ""
    if [regexp {Display} $type] {
	set rootname ""
	set suffix ""
    } else {
	set suffix PP
	if [regexp {Basic} $type] {
	    set prefix Basic
	} else {
	    set prefix $type
	}
	set variable [string tolower $type 0 0]
	set rootname $mainDirectory/${mainPrefix}${prefix}[set ${variable}(userSuffix)]
	if ![string compare $type "PhaseSpaceTracking"] {
	    set rootname ${rootname}[set ${variable}(offsetPlane)]
	}
	if ![string compare $type "FrequencyMapDelta"] {
	    set rootname ${rootname}[set ${variable}(plane)]
	}
    }
    APSElegant${type}${suffix} -rootname $rootname -makePngFiles $makePngFiles -statusCallback setStatus
}

proc FillMainFrame {widget args} {
    APSLabeledEntry .le1 -parent $widget -label "Momentum (MeV/c): " \
      -width 60 -textVariable momentum -contextHelp \
      "Enter the beam momentum in MeV/c."
    APSLabeledEntry .le2 -parent $widget -label "Matrix lattice file: " \
      -width 60 -textVariable matrixLatticeFile -fileSelectButton 1 -buttonsOnLeft 1 -fileSelectPattern *.lte \
      -contextHelp \
      "Enter the name of the lattice file that uses matrix-based elements."
    APSLabeledEntry .le2a -parent $widget -label "Matrix beamline: " \
      -width 60 -textVariable matrixBeamline \
      -contextHelp \
      "Enter the name of the beamline for the matrix representation"
    APSLabeledEntry .le2b -parent $widget -label "Offset element for matrix beamline: " \
      -width 60 -textVariable matrixOffsetElement \
      -contextHelp \
      "Enter the name of the offset element (MALIGN) for the beamline for the matrix representation.  It should be at the start of the beamline."

    APSLabeledEntry .le3 -parent $widget -label "Tracking lattice file: " \
      -width 60 -textVariable kickLatticeFile -fileSelectButton 1 -buttonsOnLeft 1 -fileSelectPattern *.lte \
      -contextHelp \
      "Enter the name of the lattice file that uses kick-based elements for tracking."
    APSLabeledEntry .le3a -parent $widget -label "Kick beamline: " \
      -width 60 -textVariable kickBeamline \
      -contextHelp \
      "Enter the name of the beamline for the kick representation"
    APSLabeledEntry .le3b -parent $widget -label "Offset element for kick beamline: " \
      -width 60 -textVariable kickOffsetElement \
      -contextHelp \
      "Enter the name of the offset element (MALIGN) for the beamline for the kick representation.  It should be at the start of the beamline."

    foreach item {1 2 3 4} {
        APSLabeledEntry .le4$item -parent $widget -label "Parameter file (optional): " \
          -width 60 -textVariable mainParameterFile($item) -fileSelectButton 1 -buttonsOnLeft 1 -fileSelectPattern *.param \
          -contextHelp \
          "Enter the name of the parameter file that contains element parameters.  It will be loaded over the lattice."
    }
    APSRadioButtonFrame .rb4 -parent $widget -label "Force occurence data on parameter files: " \
	-variable forceOccurence -valueList "1 0" -buttonList "Yes No" -orientation horizontal \
	-contextHelp "If Yes, then when elements have the same name in the lattice file, elegant is forced to honor the occurence number of elements when loading parameters.  Not only is this faster, but it is necessary if there is any variation in properties among like-named elements.  If the parameter file only covers one sector of the ring, then No should be selected so that the element properties are loaded into all occurences of the same-named element."
    APSLabeledEntry .le5 -parent $widget -label "Output directory: " \
      -width 60 -textVariable mainDirectory \
      -fileSelectButton 1 -buttonsOnLeft 1 -fileSelectDirectory 1 \
      -contextHelp \
      "Enter the directory in which to place calculation results." 
    APSLabeledEntry .le6 -parent $widget -label "Output file prefix (optional): " \
      -width 60 -textVariable mainPrefix \
      -contextHelp "Enter an optional prefix to use in creating output filenames."

    APSRadioButtonFrame .rb1 -parent $widget -label "Use GridEngine? " -orientation horizontal \
      -variable gridEngine -buttonList "Yes No" -valueList "1 0" \
      -contextHelp "Select whether or not to use the GridEngine queue to run jobs in parallel."

    APSRadioButtonFrame .rb2 -parent $widget -label "Make PNG files? " \
	-orientation horizontal \
      -variable makePngFiles -buttonList "Yes No" -valueList "1 0" \
      -contextHelp "Select whether or not to automatically make PNG plot files for each plot generated."

}

proc FillBasicFrame {widget args} {
    global basicComputations
    foreach item [list Chromaticity HigherOrderChromaticity ChromaticTuneSpread \
                    RadiationIntegrals ] {
        lappend variableList basicComputations(do$item) 
    }
    APSCheckButtonFrame .cb1 -parent $widget \
      -label "Include: " -allNone 1 -limitPerRow 4 \
      -buttonList [list Chromaticity "Higher-order chromaticity" "Chromatic Tune Spread" \
                     "Radiation Integrals" ] \
      -variableList $variableList 

    APSLabeledEntry .le1 -parent $widget -width 20 \
      -label "Momentum fractional half-range for chromatic tune spread: " \
      -textVariable basicComputations(chromaticTuneSpreadMomentumSpread) 

    APSLabeledEntry .le2 -parent $widget -width 20 \
      -label "Drift divisions: " -type integer \
      -textVariable basicComputations(driftDivisions)
    APSLabeledEntry .le3 -parent $widget -width 20 \
      -label "Dipole divisions: " -type integer \
      -textVariable basicComputations(dipoleDivisions)
    APSLabeledEntry .le4 -parent $widget -width 20 \
      -label "Quad divisions: " -type integer \
      -textVariable basicComputations(quadDivisions)
    APSLabeledEntry .le41 -parent $widget -width 20 \
      -label "Edge order for dipoles: " -type integer \
      -textVariable basicComputations(edgeOrder) 
    APSLabeledEntry .le5 -parent $widget -width 20 \
        -label "Final s for twiss plots (m): " \
	-textVariable basicComputations(finalSTwiss)
    APSLabeledEntry .le6 -parent $widget -width 20 \
      -label "Run suffix: " \
      -textVariable basicComputations(userSuffix)

    APSButton .bu1 -parent $widget -text "Compute" -command \
      "Run -computation BasicComputations"
    APSButton .bu2 -parent $widget -text "Display" -command \
	{Display -type BasicComputations}
}

proc FillCollectiveEffectsFrame {widget args} {
    global collectiveEffects
    
    APSLabeledEntry .number -parent $widget \
	-label "Number of scan points: " -width 30 \
	-textVariable collectiveEffects(scanPoints) -type integer
    APSLabeledEntry .rfFreq -parent $widget \
	-label "Rf harmonic: " -width 30 -textVariable collectiveEffects(rfHarmonic) \
	-type integer
    APSLabeledEntry .superPeriods -parent $widget \
	-label "Super periods: " -width 30 -textVariable collectiveEffects(superPeriods) \
	-type integer

    APSLabeledEntryFrame .charge -parent $widget -type real \
	-label "Charge limits (C):                                                     " \
	-width 10 -orientation horizontal \
	-variableList [list collectiveEffects(charge0) collectiveEffects(charge1)]
    APSLabeledEntryFrame .rfVolt -parent $widget -type real \
	-label "Rf voltage limits (V):                                                 " \
	-width 10 -orientation horizontal \
	-variableList [list collectiveEffects(rfVoltage0) collectiveEffects(rfVoltage1)]
    APSLabeledEntryFrame .emitRatio -parent $widget -type real \
	-label "Emittance ratio limits (ey/ex):                                        " \
	-width 10 -orientation horizontal \
	-variableList [list collectiveEffects(emittanceRatio0) collectiveEffects(emittanceRatio1)]
    APSLabeledEntryFrame .bbimp -parent $widget -type real \
	-label "Broad-band impedance limits (Ohm):                                     " \
	-width 10 -orientation horizontal \
	-variableList [list collectiveEffects(BBImpedance0) collectiveEffects(BBImpedance1)]

    APSLabeledEntry .prefix -parent $widget \
	-label "Run prefix: " -width 30 -textVariable collectiveEffects(prefix)

    APSFrame .hai -parent $widget -label "" 
    set w $widget.hai.frame
    APSLabeledEntry .hai -parent $w -label "Haissinski: " \
	-width 70 -textVariable collectiveEffects(haissinskiOutput) -commandButton 1 
    APSButton .run -parent $w -text "Run" -command "Run -computation RunHaissinski" \
	-contextHelp "Do scan for Haissinski equation (bunch lengthening)."
    APSButton .display -parent $w -text "Display" -command "Display -type DisplayHaissinski" \
	-contextHelp "Display scan for intrabeam scattering."

    APSFrame .ibs -parent $widget -label "" 
    set w $widget.ibs.frame
    APSLabeledEntry .ibs -parent $w -label "IBS: " -commandButton 1 \
	-width 60 -textVariable collectiveEffects(ibsOutput)
    APSButton .run -parent $w -text "Run" -command "Run -computation RunIBS" \
	-contextHelp "Do scan for intrabeam scattering."
    APSButton .display -parent $w -text "Display" -command "Display -type DisplayIBS" \
	-contextHelp "Display scan for intrabeam scattering."

    APSFrame .scts -parent $widget -label ""
    set w $widget.scts.frame
    APSLabeledEntry .scts -parent $w -label "SC tune spread: " -commandButton 1\
        -width 60 -textVariable collectiveEffects(scTuneShiftOutput)
    APSButton .run -parent $w -text "Run" -command "Run -computation RunSCTuneShift" \
	-contextHelp "Compute space charge tune spreads."
    APSButton .display -parent $w -text "Display" -command "Display -type DisplaySCTuneShift" \
	-contextHelp "Display scan for space-charge tune spread."
}

proc FillPhaseSpaceFrame {widget args} {
    global phaseSpaceTracking
    
    APSRadioButtonFrame .rb1 -parent $widget \
      -label "Plane: " -orientation horizontal -buttonList {x y} -valueList {X Y} \
      -commandList {"set phaseSpaceTracking(otherPlane) Y" "set phaseSpaceTracking(otherPlane) X"} \
      -variable phaseSpaceTracking(offsetPlane) -contextHelp \
      "Choose the plane for which the initial coordinate will be varied."
    APSLabeledEntry .le1 -parent $widget \
      -label "Initial offset for scan (m): " -width 20 -textVariable phaseSpaceTracking(initialOffset) \
      -contextHelp \
      "Enter the initial value of the offset for the swept coordinate."
    APSLabeledEntry .le2 -parent $widget \
      -label "Final offset for scan (m): " -width 20 -textVariable phaseSpaceTracking(finalOffset) \
      -contextHelp \
      "Enter the final value of the offset for the swept coordinate."
    APSLabeledEntry .le2p1 -parent $widget \
      -label "Number of offset values in scan: " -width 20 -textVariable phaseSpaceTracking(sweepPoints) \
      -contextHelp \
      "Enter the number of offset values in the scan."

    APSLabeledEntry .le3 -parent $widget \
      -label "Fixed offset value for the unscanned plane (m): " \
      -width 20 -textVariable phaseSpaceTracking(otherCoord) \
      -contextHelp \
      "Enter the fixed offset value for the unscanned plane."
    APSLabeledEntry .le3a -parent $widget \
      -label "Fixed fractional momentum offset: " \
      -width 20 -textVariable phaseSpaceTracking(delta) \
      -contextHelp \
      "Enter the fixed fractional momentum offset."
    APSLabeledEntry .le4 -parent $widget \
      -label "Turns to track: " -width 20 -textVariable phaseSpaceTracking(turns) \
      -contextHelp \
      "Enter the number of turns to track."

    APSLabeledEntry .le5 -parent $widget \
      -label "Run suffix: " -width 20 -textVariable phaseSpaceTracking(userSuffix) \
      -contextHelp "Enter a suffix for this set of runs."

    APSButton .bu1 -parent $widget \
      -text "Run" -command "Run -computation PhaseSpaceTracking"
    APSButton .bu2 -parent $widget \
      -text "Display" -command \
	{Display -type PhaseSpaceTracking}
}

proc FillOffMomentumTunesFrame {widget args} {
    global offMomentumTuneTracking
    
    APSLabeledEntry .le1 -parent $widget \
      -label "Initial momentum offset for scan: " -width 20 -textVariable offMomentumTuneTracking(initialOffset) \
      -contextHelp \
      "Enter the initial value of the fractional momentum offset."
    APSLabeledEntry .le2 -parent $widget \
      -label "Final momentum offset for scan: " -width 20 -textVariable offMomentumTuneTracking(finalOffset) \
      -contextHelp \
      "Enter the final value of the fractional momentum offset."
    APSLabeledEntry .le2p1 -parent $widget \
      -label "Number of offset values in scan: " -width 20 -textVariable offMomentumTuneTracking(sweepPoints) \
      -contextHelp \
      "Enter the number of offset values in the scan."

    APSLabeledEntry .le3 -parent $widget \
      -label "Fixed offset value for x plane (m): " \
      -width 20 -textVariable offMomentumTuneTracking(xOffset) \
      -contextHelp \
      "Enter the fixed offset value for the x plane."
    APSLabeledEntry .le3p1 -parent $widget \
      -label "Fixed offset value for y plane (m): " \
      -width 20 -textVariable offMomentumTuneTracking(yOffset) \
      -contextHelp \
      "Enter the fixed offset value for the y plane."

    APSLabeledEntry .le4 -parent $widget \
      -label "Turns to track: " -width 20 -textVariable offMomentumTuneTracking(turns) \
      -contextHelp \
      "Enter the number of turns to track."

    APSLabeledEntry .le4p1 -parent $widget \
      -label "Superperiodicity (for resonance diagram): " \
      -width 20 -textVariable offMomentumTuneTracking(superperiodicity) \
      -contextHelp \
      "Enter the superperiodicity of the lattice.  This is used only in generating the resonance diagram."

  
    APSLabeledEntry .le5 -parent $widget \
      -label "Run suffix: " -width 20 -textVariable offMomentumTuneTracking(userSuffix) \
      -contextHelp "Enter a suffix for this set of runs."


    APSButton .bu1 -parent $widget \
      -text "Run" -command "Run -computation OffMomentumTuneTracking"
    APSButton .bu2 -parent $widget \
      -text "Display" -command \
	{Display -type OffMomentumTuneTracking}
}


proc FillHigherOrderDispersionFrame {widget args} {
    global higherOrderDispersion gridEngine
   
    APSLabeledEntry .le1 -parent $widget \
      -label "Initial momentum offset for scan: " -width 20 -textVariable higherOrderDispersion(initialOffset) \
      -contextHelp \
      "Enter the initial value of the fractional momentum offset."
    APSLabeledEntry .le2 -parent $widget \
      -label "Final momentum offset for scan: " -width 20 -textVariable higherOrderDispersion(finalOffset) \
      -contextHelp \
      "Enter the final value of the fractional momentum offset."
    APSLabeledEntry .le2p1 -parent $widget \
      -label "Number of offset values in scan: " -width 20 -textVariable higherOrderDispersion(sweepPoints) \
      -contextHelp \
      "Enter the number of offset values in the scan."

  
    APSLabeledEntry .le5 -parent $widget \
      -label "Run suffix: " -width 20 -textVariable higherOrderDispersion(userSuffix) \
      -contextHelp "Enter a suffix for this set of runs."


    APSButton .bu1 -parent $widget \
      -text "Run" -command "Run -computation HigherOrderDispersion"
    APSButton .bu2 -parent $widget \
      -text "Display" -command \
	{Display -type HigherOrderDispersion}
}


proc FillDynamicApertureFrame {widget args} {
    global dynamicAperture
   
    APSLabeledEntry .le1 -parent $widget \
      -label "Minimum x coordinate (m): " -width 20 -textVariable dynamicAperture(xMinimum) \
      -contextHelp \
      "Enter the minimum x coordinate for the dynamic aperture search"
    APSLabeledEntry .le2 -parent $widget \
      -label "Maximum x coordinate (m): " -width 20 -textVariable dynamicAperture(xMaximum) \
      -contextHelp \
      "Enter the maximum x coordinate for the dynamic aperture search"
    APSLabeledEntry .le3 -parent $widget \
      -label "Number of x points: " -width 20 -textVariable dynamicAperture(xPoints) \
      -contextHelp \
      "Enter the number of points into which to divide the x interval."
    APSLabeledEntry .le4 -parent $widget \
      -label "Maximum y coordinate (m): " -width 20 -textVariable dynamicAperture(yMaximum) \
      -contextHelp \
      "Enter the maximum y coordinate for the dynamic aperture search"
    APSLabeledEntry .le5 -parent $widget \
      -label "Number of y points: " -width 20 -textVariable dynamicAperture(yPoints) \
      -contextHelp \
      "Enter the number of points into which to divide the y interval."
    APSLabeledEntry .le6 -parent $widget \
      -label "Number of turns: " -width 20 -textVariable dynamicAperture(turns) \
      -contextHelp \
      "Enter the number of turns to track."

 
    APSLabeledEntry .le7 -parent $widget \
      -label "Run suffix: " -width 20 -textVariable dynamicAperture(userSuffix) \
      -contextHelp "Enter a suffix for this set of runs."

    APSRadioButtonFrame .rb1 -parent $widget \
      -label "Include apertures: " -orientation horizontal -buttonList {Yes No} -valueList {1 0} \
      -variable dynamicAperture(includeApertures) -contextHelp \
      "Choose whether to include the effects of apertures that are defined in the beamline."
    
    APSButton .bu1 -parent $widget \
      -text "Run" -command "Run -computation DynamicAperture"
    APSButton .bu2 -parent $widget \
      -text "Display" -command \
	{Display -type DynamicAperture}
}


proc FillOffMomentumDynamicApertureFrame {widget args} {
    global offMomentumDynamicAperture
   
    APSLabeledEntry .le1 -parent $widget \
      -label "Minimum x coordinate (m): " -width 20 -textVariable offMomentumDynamicAperture(xMinimum) \
      -contextHelp \
      "Enter the minimum x coordinate for the dynamic aperture search"
    APSLabeledEntry .le2 -parent $widget \
      -label "Maximum x coordinate (m): " -width 20 -textVariable offMomentumDynamicAperture(xMaximum) \
      -contextHelp \
      "Enter the maximum x coordinate for the dynamic aperture search"
    APSLabeledEntry .le3 -parent $widget \
      -label "Number of x points: " -width 20 -textVariable offMomentumDynamicAperture(xPoints) \
      -contextHelp \
      "Enter the number of points into which to divide the x interval."
    APSLabeledEntry .le4 -parent $widget \
      -label "Maximum y coordinate (m): " -width 20 -textVariable offMomentumDynamicAperture(yMaximum) \
      -contextHelp \
      "Enter the maximum y coordinate for the dynamic aperture search"
    APSLabeledEntry .le5 -parent $widget \
      -label "Number of y points: " -width 20 -textVariable offMomentumDynamicAperture(yPoints) \
      -contextHelp \
      "Enter the number of points into which to divide the y interval."
    APSLabeledEntry .le6 -parent $widget \
      -label "Minimum delta value: " -width 20 -textVariable offMomentumDynamicAperture(deltaMinimum) \
      -contextHelp \
      "Enter the minimum delta coordinate for the dynamic aperture search"
    APSLabeledEntry .le7 -parent $widget \
      -label "Maximum delta value: " -width 20 -textVariable offMomentumDynamicAperture(deltaMaximum) \
      -contextHelp \
      "Enter the maximum delta coordinate for the dynamic aperture search"
    APSLabeledEntry .le8 -parent $widget \
      -label "Number of delta points: " -width 20 -textVariable offMomentumDynamicAperture(deltaPoints) \
      -contextHelp \
      "Enter the number of values of delta for which to find dynamic apertures"
    APSLabeledEntry .le9 -parent $widget \
      -label "Number of turns: " -width 20 -textVariable offMomentumDynamicAperture(turns) \
      -contextHelp \
      "Enter the number of turns to track."
    
    APSLabeledEntry .le10 -parent $widget \
      -label "Run suffix: " -width 20 -textVariable offMomentumDynamicAperture(userSuffix) \
      -contextHelp "Enter a suffix for this set of runs."

 
    APSRadioButtonFrame .rb1 -parent $widget \
      -label "Include apertures: " -orientation horizontal -buttonList {Yes No} -valueList {1 0} \
      -variable offMomentumDynamicAperture(includeApertures) -contextHelp \
      "Choose whether to include the effects of apertures that are defined in the beamline."

    APSButton .bu1 -parent $widget \
      -text "Run" -command "Run -computation OffMomentumDynamicAperture"
    APSButton .bu2 -parent $widget \
      -text "Display" -command \
	{Display -type OffMomentumDynamicAperture}
}


proc FillDynamicApertureErrorsFrame {widget args} {
    global dynamicApertureErrors

    APSLabeledEntry .le1 -parent $widget \
      -label "Maximum x coordinate (m): " -width 20 -textVariable dynamicApertureErrors(xMaximum) \
      -contextHelp \
      "Enter the maximum x coordinate for the dynamic aperture search"
    APSLabeledEntry .le2 -parent $widget \
      -label "Maximum y coordinate (m): " -width 20 -textVariable dynamicApertureErrors(yMaximum) \
      -contextHelp \
      "Enter the maximum y coordinate for the dynamic aperture search"
    APSLabeledEntry .le3 -parent $widget \
      -label "Number of steps along lines: " -width 20 -textVariable dynamicApertureErrors(steps) \
      -contextHelp \
      "Enter the number of points into which to divide the line."
    APSLabeledEntry .le4 -parent $widget \
      -label "Number of divisions: " -width 20 -textVariable dynamicApertureErrors(splits) \
      -contextHelp \
      "Enter the number of times to divide the interval."
    APSRadioButtonFrame .rb1 -parent $widget -label "Lines: " \
        -orientation horizontal -variable dynamicApertureErrors(mode) \
        -valueList "one-line three-line five-line seven-line nine-line eleven-line" \
        -buttonList "1 3 5 7 9 11" -contextHelp \
        "Number of lines to search on starting at the origin."
    APSLabeledEntry .le5a -parent $widget \
      -label "Fractional momentum offset: " -width 20 -textVariable dynamicApertureErrors(delta) \
      -contextHelp "Enter the fractional momentum offset."
    APSLabeledEntry .le6 -parent $widget \
      -label "Number of turns: " -width 20 -textVariable dynamicApertureErrors(turns) \
      -contextHelp \
      "Enter the number of turns to track."
    APSLabeledEntry .le61 -parent $widget \
      -label "Number of seeds: " -width 20 -textVariable dynamicApertureErrors(seeds) \
      -contextHelp \
      "Enter the number of random seeds to run."

    APSFrameGrid .fg -parent $widget -xList "magnet dx dy dtilt fse" \
	-yList "label bend quad sext"
    foreach label {dx dy dtilt fse} unit {m m rad ""} {
	label $widget.fg.$label.label.label -text "$label ($unit)"
	pack $widget.fg.$label.label.label 
    }
    foreach magnet {Bend Quad Sext} type {bend quad sext} {
	label $widget.fg.magnet.$type.label -text "${magnet}:" 
	pack $widget.fg.magnet.$type.label
    }

    foreach quantity {dx dy dtilt fse} {
	foreach type {bend quad sext} magnet {Bend Quad Sext} {
	    entry $widget.fg.$quantity.$type.entry \
		-textvariable dynamicApertureErrors($quantity$magnet) \
		-width 10
	    pack $widget.fg.$quantity.$type.entry
	}
    }

    APSLabeledEntry .le7 -parent $widget \
      -label "Run suffix: " -width 20 -textVariable dynamicApertureErrors(userSuffix) \
      -contextHelp "Enter a suffix for this set of runs."

    APSRadioButtonFrame .rb2 -parent $widget \
      -label "Include apertures: " -orientation horizontal -buttonList {Yes No} -valueList {1 0} \
      -variable dynamicApertureErrors(includeApertures) -contextHelp \
      "Choose whether to include the effects of apertures that are defined in the beamline."
    
    APSButton .bu1 -parent $widget \
      -text "Run" -command "Run -computation DynamicApertureErrors"
    APSButton .bu2 -parent $widget \
      -text "Display" -command \
	{Display -type DynamicApertureErrors}
}



proc FillFineDynamicApertureFrame {widget args} {
    global fineDynamicAperture

    APSLabeledEntry .le1 -parent $widget \
      -label "Minimum x coordinate (m): " -width 20 -textVariable fineDynamicAperture(xMinimum) \
      -contextHelp \
      "Enter the minimum x coordinate for the dynamic aperture run"
    APSLabeledEntry .le2 -parent $widget \
      -label "Maximum x coordinate (m): " -width 20 -textVariable fineDynamicAperture(xMaximum) \
      -contextHelp \
      "Enter the maximum x coordinate for the dynamic aperture run"
    APSLabeledEntry .le3 -parent $widget \
      -label "Number of x points: " -width 20 -textVariable fineDynamicAperture(xPoints) \
      -contextHelp \
      "Enter the number of points into which to divide the x interval."
    APSLabeledEntry .le4 -parent $widget \
      -label "Maximum y coordinate (m): " -width 20 -textVariable fineDynamicAperture(yMaximum) \
      -contextHelp \
      "Enter the maximum y coordinate for the dynamic aperture search"
    APSLabeledEntry .le5 -parent $widget \
      -label "Number of y points: " -width 20 -textVariable fineDynamicAperture(yPoints) \
      -contextHelp \
      "Enter the number of points into which to divide the y interval."
    APSLabeledEntry .le6 -parent $widget \
      -label "Number of turns: " -width 20 -textVariable fineDynamicAperture(turns) \
      -contextHelp \
      "Enter the number of turns to track."
    APSLabeledEntry .le7 -parent $widget \
      -label "Fractional momentum offset: " -width 20 -textVariable fineDynamicAperture(delta) \
      -contextHelp "Enter the fractional momentum offset" 
    APSLabeledEntry .le8 -parent $widget \
      -label "Run suffix: " -width 20 -textVariable fineDynamicAperture(userSuffix) \
      -contextHelp "Enter the suffix for the filenames."

    APSRadioButtonFrame .rb1 -parent $widget \
      -label "Include apertures: " -orientation horizontal -buttonList {Yes No} -valueList {1 0} \
      -variable fineDynamicAperture(includeApertures) -contextHelp \
      "Choose whether to include the effects of apertures that are defined in the beamline."

    APSButton .bu1 -parent $widget \
      -text "Run" -command "Run -computation FineDynamicAperture"
    APSButton .bu2 -parent $widget \
      -text "Display" -command \
	{Display -type FineDynamicAperture}
}


proc FillFrequencyMapFrame {widget args} {
    global frequencyMap
  
    APSLabeledEntry .le1 -parent $widget \
      -label "Minimum x coordinate (m): " -width 20 -textVariable frequencyMap(xMinimum) \
      -contextHelp \
      "Enter the minimum x coordinate for the frequency map run"
    APSLabeledEntry .le2 -parent $widget \
      -label "Maximum x coordinate (m): " -width 20 -textVariable frequencyMap(xMaximum) \
      -contextHelp \
      "Enter the maximum x coordinate for the frequency map run"
    APSLabeledEntry .le3 -parent $widget \
      -label "Number of x points: " -width 20 -textVariable frequencyMap(xPoints) \
      -contextHelp \
      "Enter the number of points into which to divide the x interval."
    APSLabeledEntry .le4a -parent $widget \
      -label "Minimum y coordinate (m): " -width 20 -textVariable frequencyMap(yMinimum) \
      -contextHelp \
      "Enter the maximum y coordinate for the frequency map search"
    APSLabeledEntry .le4 -parent $widget \
      -label "Maximum y coordinate (m): " -width 20 -textVariable frequencyMap(yMaximum) \
      -contextHelp \
      "Enter the maximum y coordinate for the frequency map search"
    APSLabeledEntry .le5 -parent $widget \
      -label "Number of y points: " -width 20 -textVariable frequencyMap(yPoints) \
      -contextHelp \
      "Enter the number of points into which to divide the y interval."
    APSLabeledEntry .le6 -parent $widget \
      -label "Number of turns: " -width 20 -textVariable frequencyMap(turns) \
      -contextHelp \
      "Enter the number of turns to track."
    APSLabeledEntry .le7 -parent $widget \
	-label "Fractional momentum offset: " -width 20 -textVariable frequencyMap(delta) \
	-contextHelp "Enter the fractional momentum offset" 
   
    APSRadioButtonFrame .rb1 -parent $widget \
      -label "Include apertures: " -orientation horizontal -buttonList {Yes No} -valueList {1 0} \
      -variable frequencyMap(includeApertures) -contextHelp \
      "Choose whether to include the effects of apertures that are defined in the beamline."
    APSLabeledEntry .le8 -parent $widget \
      -label "Run suffix: " -width 20 -textVariable frequencyMap(userSuffix) \
      -contextHelp "Enter the suffix for the filenames."

    APSButton .bu1 -parent $widget \
      -text "Run" -command "Run -computation FrequencyMap"
    APSButton .bu2 -parent $widget \
      -text "Display" -command \
	{Display -type FrequencyMap}
}


proc FillFrequencyMapDeltaFrame {widget args} {
    global frequencyMapDelta
 
    APSRadioButtonFrame .rbxy -parent $widget \
	-label "Plane: " -orientation horizontal -buttonList {x y} -valueList {X Y} \
	-variable frequencyMapDelta(plane) -contextHelp \
	"Choose the plane for which the initial coordinate will be varied."
    APSLabeledEntry .le1 -parent $widget \
	-label "Minimum x/y coordinate (m): " -width 20 -textVariable frequencyMapDelta(xyMinimum) \
	-contextHelp \
	"Enter the minimum x (or y) coordinate for the frequency map run"
    APSLabeledEntry .le2 -parent $widget \
	-label "Maximum x/y coordinate (m): " -width 20 -textVariable frequencyMapDelta(xyMaximum) \
	-contextHelp \
	"Enter the maximum x (or y) coordinate for the frequency map run"
    APSLabeledEntry .le3 -parent $widget \
	-label "Number of x/y points: " -width 20 -textVariable frequencyMapDelta(xyPoints) \
	-contextHelp \
	"Enter the number of points into which to divide the x interval."
    APSLabeledEntry .le3a -parent $widget \
	-label "Value for non-varied coordinate (m): " \
	-width 20 -textVariable frequencyMapDelta(otherCoordinate) \
	-contextHelp "Enter the value for the coordinate (y or x) that is not varied."
    APSLabeledEntry .le4a -parent $widget \
	-label "Minimum delta value: " -width 20 -textVariable frequencyMapDelta(deltaMinimum) \
	-contextHelp \
	"Enter the minimum delta coordinate for the frequency map search"
    APSLabeledEntry .le4 -parent $widget \
	-label "Maximum delta value: " -width 20 -textVariable frequencyMapDelta(deltaMaximum) \
	-contextHelp \
	"Enter the maximum delta coordinate for the frequency map search"
    APSLabeledEntry .le5 -parent $widget \
	-label "Number of delta points: " -width 20 -textVariable frequencyMapDelta(deltaPoints) \
	-contextHelp \
	"Enter the number of points into which to divide the delta interval."
    APSLabeledEntry .le6 -parent $widget \
	-label "Number of turns: " -width 20 -textVariable frequencyMapDelta(turns) \
	-contextHelp \
	"Enter the number of turns to track."
    APSRadioButtonFrame .rb1 -parent $widget \
	-label "Include apertures: " -orientation horizontal -buttonList {Yes No} -valueList {1 0} \
	-variable frequencyMapDelta(includeApertures) -contextHelp \
	"Choose whether to include the effects of apertures that are defined in the beamline."
    APSLabeledEntry .le8 -parent $widget \
	-label "Run suffix: " -width 20 -textVariable frequencyMapDelta(userSuffix) \
	-contextHelp "Enter the suffix for the filenames."
    
    APSButton .bu1 -parent $widget \
	-text "Run" -command "Run -computation FrequencyMapDelta"
    APSButton .bu2 -parent $widget \
	-text "Display" -command \
	{Display -type FrequencyMapDelta}
}

proc FillMomentumApertureFrame {widget args} {
    global momentumAperture

    APSLabeledEntry .lex -parent $widget \
	-label "Initial x coordinate (m): " -width 20 -textVariable momentumAperture(xInitial) \
	-contextHelp \
	"Enter the initial x coordinate relative to the closed orbit."
    APSLabeledEntry .ley -parent $widget \
	-label "Initial y coordinate (m): " -width 20 -textVariable momentumAperture(yInitial) \
	-contextHelp \
	"Enter the initial y coordinate relative to the closed orbit."

    APSLabeledEntry .ledns -parent $widget \
	-label "Negative delta start: " -width 20 \
        -textVariable momentumAperture(deltaNegativeStart) \
	-contextHelp \
	"Enter the starting value for delta for the negative-side scan."
    APSLabeledEntry .ledps -parent $widget \
	-label "Positive delta start: " -width 20 \
        -textVariable momentumAperture(deltaPositiveStart) \
	-contextHelp \
	"Enter the starting value for delta for the positive-side scan."

    APSLabeledEntry .ledp -parent $widget \
	-label "Initial delta step: " \
	-width 20 -textVariable momentumAperture(initialDeltaStep) \
	-contextHelp "Initial step size for delta."
    APSLabeledEntry .leos -parent $widget -type integer \
	-label "Over steps: " -width 20 -textVariable momentumAperture(oversteps) \
	-contextHelp \
	"Enter the number of steps to go beyond the first surviving particle before scanning back toward the point of loss."
    APSLabeledEntry .lesp -parent $widget -type integer \
	-label "Splits: " -width 20 -textVariable momentumAperture(splits) \
	-contextHelp \
	"Enter the number of interval splits."
    APSLabeledEntry .lesb -parent $widget -type integer \
	-label "Steps back before splitting: " -width 20 -textVariable momentumAperture(stepsBack) \
	-contextHelp \
	"Enter the number of steps back from a loss position before scan restart."
    APSLabeledEntry .splitdiv -parent $widget -type integer \
        -label "Step size divisor: " -width 20 -textVariable momentumAperture(stepDivisor) \
        -label "Divisor for step size when splitting and stepping back." \

    APSLabeledEntry .les0 -parent $widget \
	-label "Starting s (m): " -width 20 -textVariable momentumAperture(sStart) \
	-contextHelp \
	"Enter the starting value of s for selecting beamline elements." 
    APSLabeledEntry .les1 -parent $widget \
	-label "Ending s (m): " -width 20 -textVariable momentumAperture(sEnd) \
	-contextHelp \
	"Enter the ending value of s for selecting beamline elements." 

    APSLabeledEntry .lep -parent $widget \
	-label "Element name pattern: " -width 20 -textVariable momentumAperture(pattern) \
	-contextHelp "Enter a pattern for matching to elements names for selecting beamline elements."
    
    APSLabeledEntry .let -parent $widget \
	-label "Turns: " -width 20 -textVariable momentumAperture(turns) \
	-contextHelp \
	"Enter the number of turns to track."
    
    APSRadioButtonFrame .rb1 -parent $widget \
	-label "Include apertures: " -orientation horizontal -buttonList {Yes No} -valueList {1 0} \
	-variable momentumAperture(includeApertures) -contextHelp \
	"Choose whether to include the effects of apertures that are defined in the beamline."

    APSLabeledEntry .lesn -parent $widget \
	-label "Number of jobs: " -width 20 -textVariable momentumAperture(numberOfJobs) \
	-contextHelp \
	"Enter the number of jobs into which to divide the computation."

    APSLabeledEntry .leaf -parent $widget \
        -label "Aperture file: " -width 60 -textVariable momentumAperture(apertureFile) \
        -fileSelectButton 1 -buttonsOnLeft 1 -fileSelectPattern *.sdds \
        -contextHelp \
        "Enter the name of a file containing aperture data."

    APSRadioButtonFrame .rb2 -parent $widget \
        -label "Default matrix order: " -orientation horizontal -buttonList {1 2} -valueList {1 2} \
        -variable momentumAperture(defaultOrder) \
        -contextHelp \
        "Choose the default order for elements implemented as matrices."

    APSButton .bu1 -parent $widget \
	-text "Run" -command "Run -computation MomentumAperture"
    APSButton .bu2 -parent $widget \
	-text "Display" -command {Display -type MomentumAperture}
}

set tabIndex -1
set sectionList [list Main Basic PhsSpc HghrOrdrDsprsn \
    OffMmntmTunes DA OffMmntmDA DA+Errors FineDA FMA FMADelta MmntmAprtr \
    ClctveEfcts]
set descriptionList [list "" "Twiss parameters, chromaticities, radiation integrals" \
    "Phase space tracking, plots, FFTs." \
    "Higher order dispersion from off-momentum orbits." \
    "Off-momentum tunes from tracking." \
    "On-momentum dynamic aperture using a relatively coarse algorithm." \
    "Off-momentum dynamic apertures using a relatively coarse algorithm." \
    "On-momentum dynamic aperture with errors (many seeds)." \
    "Dynamic aperture using a high-resolution algorithm (requires a cluster)." \
    "Frequency map analysis (requires a cluster)." \
    "Frequency map analysis vs delta (requires a cluster)." \
    "Momentum aperture vs s." \
    "Collective effects."]

proc DescribeSection {} {
    global tabIndex descriptionList
    if [string length [lindex $descriptionList $tabIndex]] {
        setStatus [lindex $descriptionList $tabIndex]
    }
}

set tabFrameWidgetList [APSTabFrame .main -parent .userFrame \
    -labelList $sectionList -width 900 -height 500 -frameIndexVariable tabIndex \
    -commandList \
        [APSReplicateItem -item DescribeSection -number [llength $sectionList]]]

set i 0
FillMainFrame  [lindex $tabFrameWidgetList $i]; incr i
FillBasicFrame [lindex $tabFrameWidgetList $i]; incr i
FillPhaseSpaceFrame [lindex $tabFrameWidgetList $i]; incr i
FillHigherOrderDispersionFrame [lindex $tabFrameWidgetList $i]; incr i
FillOffMomentumTunesFrame [lindex $tabFrameWidgetList $i]; incr i
FillDynamicApertureFrame [lindex $tabFrameWidgetList $i]; incr i
FillOffMomentumDynamicApertureFrame [lindex $tabFrameWidgetList $i]; incr i
FillDynamicApertureErrorsFrame [lindex $tabFrameWidgetList $i]; incr i
FillFineDynamicApertureFrame [lindex $tabFrameWidgetList $i]; incr i
FillFrequencyMapFrame [lindex $tabFrameWidgetList $i]; incr i
FillFrequencyMapDeltaFrame [lindex $tabFrameWidgetList $i]; incr i
FillMomentumApertureFrame [lindex $tabFrameWidgetList $i]; incr i
FillCollectiveEffectsFrame [lindex $tabFrameWidgetList $i]; incr i

lappend elegantSaveVarList momentum matrixLatticeFile kickLatticeFile mainParameterFile mainDirectory
lappend elegantSaveVarList mainPrefix gridEngine forceOccurence makePngFiles
lappend elegantSaveVarList matrixBeamline kickBeamline matrixOffsetElement kickOffsetElement
lappend elegantSaveVarList basicComputations phaseSpaceTracking offMomentumTuneTracking higherOrderDispersion
lappend elegantSaveVarList dynamicAperture offMomentumDynamicAperture fineDynamicAperture
lappend elegantSaveVarList frequencyMap collectiveEffects dynamicApertureErrors frequencyMapDelta
lappend elegantSaveVarList momentumAperture

set args $argv
set configuration ""
set templateDirectory ""
if {[APSStrictParseArguments {configuration templateDirectory}]} {
    return -code error "usage: $argv0 \[-configuration <filename>\] \[-templateDirectory <path>\]"
}
if {[string length $configuration]} {
    if ![file exists $configuration] {
        setStatus "not found: $configuration"
    } else {
        source $configuration
    }    
}
if [string length $templateDirectory] {
    set sourceDir $templateDirectory
}

setStatus "Ready."
update
